//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 11/17/2018 8:43:22 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace QuanLyThuVien
{

    [DatabaseAttribute(Name = "quanlythuvien")]
    [ProviderAttribute(typeof(Devart.Data.MySql.Linq.Provider.MySqlDataProvider))]
    public partial class QUANLYTHUVIENDataContext1 : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(QUANLYTHUVIENDataContext1));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertDOCGIA(DOCGIA instance);
        partial void UpdateDOCGIA(DOCGIA instance);
        partial void DeleteDOCGIA(DOCGIA instance);
        partial void InsertSACH(SACH instance);
        partial void UpdateSACH(SACH instance);
        partial void DeleteSACH(SACH instance);
        partial void InsertTACGIA(TACGIA instance);
        partial void UpdateTACGIA(TACGIA instance);
        partial void DeleteTACGIA(TACGIA instance);
        partial void InsertNHAXB(NHAXB instance);
        partial void UpdateNHAXB(NHAXB instance);
        partial void DeleteNHAXB(NHAXB instance);
        partial void InsertVITRI(VITRI instance);
        partial void UpdateVITRI(VITRI instance);
        partial void DeleteVITRI(VITRI instance);
        partial void InsertTHELOAI(THELOAI instance);
        partial void UpdateTHELOAI(THELOAI instance);
        partial void DeleteTHELOAI(THELOAI instance);
        partial void InsertNHANVIEN(NHANVIEN instance);
        partial void UpdateNHANVIEN(NHANVIEN instance);
        partial void DeleteNHANVIEN(NHANVIEN instance);
        partial void InsertCTPHIEUMUONTRA(CTPHIEUMUONTRA instance);
        partial void UpdateCTPHIEUMUONTRA(CTPHIEUMUONTRA instance);
        partial void DeleteCTPHIEUMUONTRA(CTPHIEUMUONTRA instance);
        partial void InsertPHIEUMUONTRA(PHIEUMUONTRA instance);
        partial void UpdatePHIEUMUONTRA(PHIEUMUONTRA instance);
        partial void DeletePHIEUMUONTRA(PHIEUMUONTRA instance);
        partial void InsertDONDATHANG(DONDATHANG instance);
        partial void UpdateDONDATHANG(DONDATHANG instance);
        partial void DeleteDONDATHANG(DONDATHANG instance);

        #endregion

        public QUANLYTHUVIENDataContext1() :
        base(GetConnectionString("QUANLYTHUVIENDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        public QUANLYTHUVIENDataContext1(MappingSource mappingSource) :
        base(GetConnectionString("QUANLYTHUVIENDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName)
        {
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public QUANLYTHUVIENDataContext1(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public QUANLYTHUVIENDataContext1(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public QUANLYTHUVIENDataContext1(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public QUANLYTHUVIENDataContext1(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<DOCGIA> DOCGIAs
        {
            get
            {
                return this.GetTable<DOCGIA>();
            }
        }

        public Devart.Data.Linq.Table<SACH> SACHES
        {
            get
            {
                return this.GetTable<SACH>();
            }
        }

        public Devart.Data.Linq.Table<TACGIA> TACGIAs
        {
            get
            {
                return this.GetTable<TACGIA>();
            }
        }

        public Devart.Data.Linq.Table<NHAXB> NHAXBs
        {
            get
            {
                return this.GetTable<NHAXB>();
            }
        }

        public Devart.Data.Linq.Table<VITRI> VITRIs
        {
            get
            {
                return this.GetTable<VITRI>();
            }
        }

        public Devart.Data.Linq.Table<THELOAI> THELOAIs
        {
            get
            {
                return this.GetTable<THELOAI>();
            }
        }

        public Devart.Data.Linq.Table<NHANVIEN> NHANVIENs
        {
            get
            {
                return this.GetTable<NHANVIEN>();
            }
        }

        public Devart.Data.Linq.Table<CTPHIEUMUONTRA> CTPHIEUMUONTRAs
        {
            get
            {
                return this.GetTable<CTPHIEUMUONTRA>();
            }
        }

        public Devart.Data.Linq.Table<PHIEUMUONTRA> PHIEUMUONTRAs
        {
            get
            {
                return this.GetTable<PHIEUMUONTRA>();
            }
        }

        public Devart.Data.Linq.Table<DONDATHANG> DONDATHANGs
        {
            get
            {
                return this.GetTable<DONDATHANG>();
            }
        }
    }
}

namespace QuanLyThuVien
{

    /// <summary>
    /// There are no comments for QuanLyThuVien.DOCGIA in the schema.
    /// </summary>
    [Table(Name = @"quanlythuvien.docgia")]
    public partial class DOCGIA : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _MADG;

        private string _MALOAIDG;

        private string _TENDG;

        private string _EMAILDG;

        private string _DIACHIDG;

        private string _SDTDG;

        private string _GIOITINHDG;

        private string _TAIKHOAN;
        #pragma warning restore 0649

        private EntitySet<PHIEUMUONTRA> _PHIEUMUONTRAs;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnMADGChanging(string value);
        partial void OnMADGChanged();
        partial void OnMALOAIDGChanging(string value);
        partial void OnMALOAIDGChanged();
        partial void OnTENDGChanging(string value);
        partial void OnTENDGChanged();
        partial void OnEMAILDGChanging(string value);
        partial void OnEMAILDGChanged();
        partial void OnDIACHIDGChanging(string value);
        partial void OnDIACHIDGChanged();
        partial void OnSDTDGChanging(string value);
        partial void OnSDTDGChanged();
        partial void OnGIOITINHDGChanging(string value);
        partial void OnGIOITINHDGChanged();
        partial void OnTAIKHOANChanging(string value);
        partial void OnTAIKHOANChanged();
        #endregion

        public DOCGIA()
        {
            this._PHIEUMUONTRAs = new EntitySet<PHIEUMUONTRA>(new Action<PHIEUMUONTRA>(this.attach_PHIEUMUONTRAs), new Action<PHIEUMUONTRA>(this.detach_PHIEUMUONTRAs));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for MADG in the schema.
        /// </summary>
        [Column(Storage = "_MADG", CanBeNull = false, DbType = "CHAR(5) NOT NULL", IsPrimaryKey = true)]
        public string MADG
        {
            get
            {
                return this._MADG;
            }
            set
            {
                if (this._MADG != value)
                {
                    this.OnMADGChanging(value);
                    this.SendPropertyChanging();
                    this._MADG = value;
                    this.SendPropertyChanged("MADG");
                    this.OnMADGChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MALOAIDG in the schema.
        /// </summary>
        [Column(Storage = "_MALOAIDG", DbType = "CHAR(5) NULL", UpdateCheck = UpdateCheck.Never)]
        public string MALOAIDG
        {
            get
            {
                return this._MALOAIDG;
            }
            set
            {
                if (this._MALOAIDG != value)
                {
                    this.OnMALOAIDGChanging(value);
                    this.SendPropertyChanging();
                    this._MALOAIDG = value;
                    this.SendPropertyChanged("MALOAIDG");
                    this.OnMALOAIDGChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TENDG in the schema.
        /// </summary>
        [Column(Storage = "_TENDG", DbType = "VARCHAR(30) NULL", UpdateCheck = UpdateCheck.Never)]
        public string TENDG
        {
            get
            {
                return this._TENDG;
            }
            set
            {
                if (this._TENDG != value)
                {
                    this.OnTENDGChanging(value);
                    this.SendPropertyChanging();
                    this._TENDG = value;
                    this.SendPropertyChanged("TENDG");
                    this.OnTENDGChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EMAILDG in the schema.
        /// </summary>
        [Column(Storage = "_EMAILDG", DbType = "VARCHAR(20) NULL", UpdateCheck = UpdateCheck.Never)]
        public string EMAILDG
        {
            get
            {
                return this._EMAILDG;
            }
            set
            {
                if (this._EMAILDG != value)
                {
                    this.OnEMAILDGChanging(value);
                    this.SendPropertyChanging();
                    this._EMAILDG = value;
                    this.SendPropertyChanged("EMAILDG");
                    this.OnEMAILDGChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DIACHIDG in the schema.
        /// </summary>
        [Column(Storage = "_DIACHIDG", DbType = "VARCHAR(100) NULL", UpdateCheck = UpdateCheck.Never)]
        public string DIACHIDG
        {
            get
            {
                return this._DIACHIDG;
            }
            set
            {
                if (this._DIACHIDG != value)
                {
                    this.OnDIACHIDGChanging(value);
                    this.SendPropertyChanging();
                    this._DIACHIDG = value;
                    this.SendPropertyChanged("DIACHIDG");
                    this.OnDIACHIDGChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SDTDG in the schema.
        /// </summary>
        [Column(Storage = "_SDTDG", DbType = "VARCHAR(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public string SDTDG
        {
            get
            {
                return this._SDTDG;
            }
            set
            {
                if (this._SDTDG != value)
                {
                    this.OnSDTDGChanging(value);
                    this.SendPropertyChanging();
                    this._SDTDG = value;
                    this.SendPropertyChanged("SDTDG");
                    this.OnSDTDGChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GIOITINHDG in the schema.
        /// </summary>
        [Column(Storage = "_GIOITINHDG", DbType = "VARCHAR(5) NULL", UpdateCheck = UpdateCheck.Never)]
        public string GIOITINHDG
        {
            get
            {
                return this._GIOITINHDG;
            }
            set
            {
                if (this._GIOITINHDG != value)
                {
                    this.OnGIOITINHDGChanging(value);
                    this.SendPropertyChanging();
                    this._GIOITINHDG = value;
                    this.SendPropertyChanged("GIOITINHDG");
                    this.OnGIOITINHDGChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TAIKHOAN in the schema.
        /// </summary>
        [Column(Storage = "_TAIKHOAN", DbType = "VARCHAR(30) NULL", UpdateCheck = UpdateCheck.Never)]
        public string TAIKHOAN
        {
            get
            {
                return this._TAIKHOAN;
            }
            set
            {
                if (this._TAIKHOAN != value)
                {
                    this.OnTAIKHOANChanging(value);
                    this.SendPropertyChanging();
                    this._TAIKHOAN = value;
                    this.SendPropertyChanged("TAIKHOAN");
                    this.OnTAIKHOANChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PHIEUMUONTRAs in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DOCGIA_PHIEUMUONTRA", Storage="_PHIEUMUONTRAs", ThisKey="MADG", OtherKey="MADG", DeleteRule="RESTRICT")]
        public EntitySet<PHIEUMUONTRA> PHIEUMUONTRAs
        {
            get
            {
                return this._PHIEUMUONTRAs;
            }
            set
            {
                this._PHIEUMUONTRAs.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_PHIEUMUONTRAs(PHIEUMUONTRA entity)
        {
            this.SendPropertyChanging("PHIEUMUONTRAs");
            entity.DOCGIA = this;
        }
    
        private void detach_PHIEUMUONTRAs(PHIEUMUONTRA entity)
        {
            this.SendPropertyChanging("PHIEUMUONTRAs");
            entity.DOCGIA = null;
        }
    }

    /// <summary>
    /// There are no comments for QuanLyThuVien.SACH in the schema.
    /// </summary>
    [Table(Name = @"quanlythuvien.sach")]
    public partial class SACH : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _MASACH;

        private string _MATHELOAI;

        private string _MATACGIA;

        private string _MANXB;

        private string _MAVT;

        private string _TENSACH;

        private System.Nullable<int> _NAMXB;

        private string _HINHANHSACH;

        private string _MOTA;

        private string _KHOA;

        private System.Nullable<System.DateTime> _THANGNHAP;

        private System.Nullable<float> _GIA;

        private System.Nullable<int> _SOLUONG;
        #pragma warning restore 0649

        private EntityRef<TACGIA> _TACGIA;

        private EntityRef<NHAXB> _NHAXB;

        private EntityRef<VITRI> _VITRI;

        private EntityRef<THELOAI> _THELOAI;

        private EntitySet<CTPHIEUMUONTRA> _CTPHIEUMUONTRAs;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnMASACHChanging(string value);
        partial void OnMASACHChanged();
        partial void OnMATHELOAIChanging(string value);
        partial void OnMATHELOAIChanged();
        partial void OnMATACGIAChanging(string value);
        partial void OnMATACGIAChanged();
        partial void OnMANXBChanging(string value);
        partial void OnMANXBChanged();
        partial void OnMAVTChanging(string value);
        partial void OnMAVTChanged();
        partial void OnTENSACHChanging(string value);
        partial void OnTENSACHChanged();
        partial void OnNAMXBChanging(System.Nullable<int> value);
        partial void OnNAMXBChanged();
        partial void OnHINHANHSACHChanging(string value);
        partial void OnHINHANHSACHChanged();
        partial void OnMOTAChanging(string value);
        partial void OnMOTAChanged();
        partial void OnKHOAChanging(string value);
        partial void OnKHOAChanged();
        partial void OnTHANGNHAPChanging(System.Nullable<System.DateTime> value);
        partial void OnTHANGNHAPChanged();
        partial void OnGIAChanging(System.Nullable<float> value);
        partial void OnGIAChanged();
        partial void OnSOLUONGChanging(System.Nullable<int> value);
        partial void OnSOLUONGChanged();
        #endregion

        public SACH()
        {
            this._TACGIA  = default(EntityRef<TACGIA>);
            this._NHAXB  = default(EntityRef<NHAXB>);
            this._VITRI  = default(EntityRef<VITRI>);
            this._THELOAI  = default(EntityRef<THELOAI>);
            this._CTPHIEUMUONTRAs = new EntitySet<CTPHIEUMUONTRA>(new Action<CTPHIEUMUONTRA>(this.attach_CTPHIEUMUONTRAs), new Action<CTPHIEUMUONTRA>(this.detach_CTPHIEUMUONTRAs));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for MASACH in the schema.
        /// </summary>
        [Column(Storage = "_MASACH", CanBeNull = false, DbType = "CHAR(5) NOT NULL", IsPrimaryKey = true)]
        public string MASACH
        {
            get
            {
                return this._MASACH;
            }
            set
            {
                if (this._MASACH != value)
                {
                    this.OnMASACHChanging(value);
                    this.SendPropertyChanging();
                    this._MASACH = value;
                    this.SendPropertyChanged("MASACH");
                    this.OnMASACHChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MATHELOAI in the schema.
        /// </summary>
        [Column(Storage = "_MATHELOAI", CanBeNull = false, DbType = "CHAR(5) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string MATHELOAI
        {
            get
            {
                return this._MATHELOAI;
            }
            set
            {
                if (this._MATHELOAI != value)
                {
                    if (this._THELOAI.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnMATHELOAIChanging(value);
                    this.SendPropertyChanging();
                    this._MATHELOAI = value;
                    this.SendPropertyChanged("MATHELOAI");
                    this.OnMATHELOAIChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MATACGIA in the schema.
        /// </summary>
        [Column(Storage = "_MATACGIA", CanBeNull = false, DbType = "CHAR(5) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string MATACGIA
        {
            get
            {
                return this._MATACGIA;
            }
            set
            {
                if (this._MATACGIA != value)
                {
                    if (this._TACGIA.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnMATACGIAChanging(value);
                    this.SendPropertyChanging();
                    this._MATACGIA = value;
                    this.SendPropertyChanged("MATACGIA");
                    this.OnMATACGIAChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MANXB in the schema.
        /// </summary>
        [Column(Storage = "_MANXB", CanBeNull = false, DbType = "CHAR(5) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string MANXB
        {
            get
            {
                return this._MANXB;
            }
            set
            {
                if (this._MANXB != value)
                {
                    if (this._NHAXB.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnMANXBChanging(value);
                    this.SendPropertyChanging();
                    this._MANXB = value;
                    this.SendPropertyChanged("MANXB");
                    this.OnMANXBChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MAVT in the schema.
        /// </summary>
        [Column(Storage = "_MAVT", DbType = "CHAR(5) NULL", UpdateCheck = UpdateCheck.Never)]
        public string MAVT
        {
            get
            {
                return this._MAVT;
            }
            set
            {
                if (this._MAVT != value)
                {
                    if (this._VITRI.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnMAVTChanging(value);
                    this.SendPropertyChanging();
                    this._MAVT = value;
                    this.SendPropertyChanged("MAVT");
                    this.OnMAVTChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TENSACH in the schema.
        /// </summary>
        [Column(Storage = "_TENSACH", DbType = "VARCHAR(50) NULL", UpdateCheck = UpdateCheck.Never)]
        public string TENSACH
        {
            get
            {
                return this._TENSACH;
            }
            set
            {
                if (this._TENSACH != value)
                {
                    this.OnTENSACHChanging(value);
                    this.SendPropertyChanging();
                    this._TENSACH = value;
                    this.SendPropertyChanged("TENSACH");
                    this.OnTENSACHChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NAMXB in the schema.
        /// </summary>
        [Column(Storage = "_NAMXB", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> NAMXB
        {
            get
            {
                return this._NAMXB;
            }
            set
            {
                if (this._NAMXB != value)
                {
                    this.OnNAMXBChanging(value);
                    this.SendPropertyChanging();
                    this._NAMXB = value;
                    this.SendPropertyChanged("NAMXB");
                    this.OnNAMXBChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for HINHANHSACH in the schema.
        /// </summary>
        [Column(Storage = "_HINHANHSACH", DbType = "VARCHAR(100) NULL", UpdateCheck = UpdateCheck.Never)]
        public string HINHANHSACH
        {
            get
            {
                return this._HINHANHSACH;
            }
            set
            {
                if (this._HINHANHSACH != value)
                {
                    this.OnHINHANHSACHChanging(value);
                    this.SendPropertyChanging();
                    this._HINHANHSACH = value;
                    this.SendPropertyChanged("HINHANHSACH");
                    this.OnHINHANHSACHChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MOTA in the schema.
        /// </summary>
        [Column(Storage = "_MOTA", DbType = "VARCHAR(1500) NULL", UpdateCheck = UpdateCheck.Never)]
        public string MOTA
        {
            get
            {
                return this._MOTA;
            }
            set
            {
                if (this._MOTA != value)
                {
                    this.OnMOTAChanging(value);
                    this.SendPropertyChanging();
                    this._MOTA = value;
                    this.SendPropertyChanged("MOTA");
                    this.OnMOTAChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for KHOA in the schema.
        /// </summary>
        [Column(Storage = "_KHOA", DbType = "VARCHAR(50) NULL", UpdateCheck = UpdateCheck.Never)]
        public string KHOA
        {
            get
            {
                return this._KHOA;
            }
            set
            {
                if (this._KHOA != value)
                {
                    this.OnKHOAChanging(value);
                    this.SendPropertyChanging();
                    this._KHOA = value;
                    this.SendPropertyChanged("KHOA");
                    this.OnKHOAChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for THANGNHAP in the schema.
        /// </summary>
        [Column(Storage = "_THANGNHAP", DbType = "DATE NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> THANGNHAP
        {
            get
            {
                return this._THANGNHAP;
            }
            set
            {
                if (this._THANGNHAP != value)
                {
                    this.OnTHANGNHAPChanging(value);
                    this.SendPropertyChanging();
                    this._THANGNHAP = value;
                    this.SendPropertyChanged("THANGNHAP");
                    this.OnTHANGNHAPChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GIA in the schema.
        /// </summary>
        [Column(Storage = "_GIA", DbType = "FLOAT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<float> GIA
        {
            get
            {
                return this._GIA;
            }
            set
            {
                if (this._GIA != value)
                {
                    this.OnGIAChanging(value);
                    this.SendPropertyChanging();
                    this._GIA = value;
                    this.SendPropertyChanged("GIA");
                    this.OnGIAChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SOLUONG in the schema.
        /// </summary>
        [Column(Storage = "_SOLUONG", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> SOLUONG
        {
            get
            {
                return this._SOLUONG;
            }
            set
            {
                if (this._SOLUONG != value)
                {
                    this.OnSOLUONGChanging(value);
                    this.SendPropertyChanging();
                    this._SOLUONG = value;
                    this.SendPropertyChanged("SOLUONG");
                    this.OnSOLUONGChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TACGIA in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="TACGIA_SACH", Storage="_TACGIA", ThisKey="MATACGIA", OtherKey="MATACGIA", IsForeignKey=true)]
        public TACGIA TACGIA
        {
            get
            {
                return this._TACGIA.Entity;
            }
            set
            {
                TACGIA previousValue = this._TACGIA.Entity;
                if ((previousValue != value) || (this._TACGIA.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._TACGIA.Entity = null;
                        previousValue.SACHES.Remove(this);
                    }
                    this._TACGIA.Entity = value;
                    if (value != null)
                    {
                        this._MATACGIA = value.MATACGIA;
                        value.SACHES.Add(this);
                    }
                    else
                    {
                        this._MATACGIA = default(string);
                    }
                    this.SendPropertyChanged("TACGIA");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NHAXB in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="NHAXB_SACH", Storage="_NHAXB", ThisKey="MANXB", OtherKey="MANXB", IsForeignKey=true)]
        public NHAXB NHAXB
        {
            get
            {
                return this._NHAXB.Entity;
            }
            set
            {
                NHAXB previousValue = this._NHAXB.Entity;
                if ((previousValue != value) || (this._NHAXB.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._NHAXB.Entity = null;
                        previousValue.SACHES.Remove(this);
                    }
                    this._NHAXB.Entity = value;
                    if (value != null)
                    {
                        this._MANXB = value.MANXB;
                        value.SACHES.Add(this);
                    }
                    else
                    {
                        this._MANXB = default(string);
                    }
                    this.SendPropertyChanged("NHAXB");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for VITRI in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="VITRI_SACH", Storage="_VITRI", ThisKey="MAVT", OtherKey="MAVT", IsForeignKey=true)]
        public VITRI VITRI
        {
            get
            {
                return this._VITRI.Entity;
            }
            set
            {
                VITRI previousValue = this._VITRI.Entity;
                if ((previousValue != value) || (this._VITRI.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._VITRI.Entity = null;
                        previousValue.SACHES.Remove(this);
                    }
                    this._VITRI.Entity = value;
                    if (value != null)
                    {
                        this._MAVT = value.MAVT;
                        value.SACHES.Add(this);
                    }
                    else
                    {
                        this._MAVT = default(string);
                    }
                    this.SendPropertyChanged("VITRI");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for THELOAI in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="THELOAI_SACH", Storage="_THELOAI", ThisKey="MATHELOAI", OtherKey="MATHELOAI", IsForeignKey=true)]
        public THELOAI THELOAI
        {
            get
            {
                return this._THELOAI.Entity;
            }
            set
            {
                THELOAI previousValue = this._THELOAI.Entity;
                if ((previousValue != value) || (this._THELOAI.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._THELOAI.Entity = null;
                        previousValue.SACHES.Remove(this);
                    }
                    this._THELOAI.Entity = value;
                    if (value != null)
                    {
                        this._MATHELOAI = value.MATHELOAI;
                        value.SACHES.Add(this);
                    }
                    else
                    {
                        this._MATHELOAI = default(string);
                    }
                    this.SendPropertyChanged("THELOAI");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CTPHIEUMUONTRAs in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SACH_CTPHIEUMUONTRA", Storage="_CTPHIEUMUONTRAs", ThisKey="MASACH", OtherKey="MASACH", DeleteRule="RESTRICT")]
        public EntitySet<CTPHIEUMUONTRA> CTPHIEUMUONTRAs
        {
            get
            {
                return this._CTPHIEUMUONTRAs;
            }
            set
            {
                this._CTPHIEUMUONTRAs.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_CTPHIEUMUONTRAs(CTPHIEUMUONTRA entity)
        {
            this.SendPropertyChanging("CTPHIEUMUONTRAs");
            entity.SACH = this;
        }
    
        private void detach_CTPHIEUMUONTRAs(CTPHIEUMUONTRA entity)
        {
            this.SendPropertyChanging("CTPHIEUMUONTRAs");
            entity.SACH = null;
        }
    }

    /// <summary>
    /// There are no comments for QuanLyThuVien.TACGIA in the schema.
    /// </summary>
    [Table(Name = @"quanlythuvien.tacgia")]
    public partial class TACGIA : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _MATACGIA;

        private string _TENTACGIA;

        private string _DTTACGIA;

        private string _DCTACGIA;
        #pragma warning restore 0649

        private EntitySet<SACH> _SACHES;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnMATACGIAChanging(string value);
        partial void OnMATACGIAChanged();
        partial void OnTENTACGIAChanging(string value);
        partial void OnTENTACGIAChanged();
        partial void OnDTTACGIAChanging(string value);
        partial void OnDTTACGIAChanged();
        partial void OnDCTACGIAChanging(string value);
        partial void OnDCTACGIAChanged();
        #endregion

        public TACGIA()
        {
            this._SACHES = new EntitySet<SACH>(new Action<SACH>(this.attach_SACHES), new Action<SACH>(this.detach_SACHES));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for MATACGIA in the schema.
        /// </summary>
        [Column(Storage = "_MATACGIA", CanBeNull = false, DbType = "CHAR(5) NOT NULL", IsPrimaryKey = true)]
        public string MATACGIA
        {
            get
            {
                return this._MATACGIA;
            }
            set
            {
                if (this._MATACGIA != value)
                {
                    this.OnMATACGIAChanging(value);
                    this.SendPropertyChanging();
                    this._MATACGIA = value;
                    this.SendPropertyChanged("MATACGIA");
                    this.OnMATACGIAChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TENTACGIA in the schema.
        /// </summary>
        [Column(Storage = "_TENTACGIA", DbType = "VARCHAR(30) NULL", UpdateCheck = UpdateCheck.Never)]
        public string TENTACGIA
        {
            get
            {
                return this._TENTACGIA;
            }
            set
            {
                if (this._TENTACGIA != value)
                {
                    this.OnTENTACGIAChanging(value);
                    this.SendPropertyChanging();
                    this._TENTACGIA = value;
                    this.SendPropertyChanged("TENTACGIA");
                    this.OnTENTACGIAChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DTTACGIA in the schema.
        /// </summary>
        [Column(Storage = "_DTTACGIA", DbType = "VARCHAR(10) NULL", UpdateCheck = UpdateCheck.Never)]
        public string DTTACGIA
        {
            get
            {
                return this._DTTACGIA;
            }
            set
            {
                if (this._DTTACGIA != value)
                {
                    this.OnDTTACGIAChanging(value);
                    this.SendPropertyChanging();
                    this._DTTACGIA = value;
                    this.SendPropertyChanged("DTTACGIA");
                    this.OnDTTACGIAChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DCTACGIA in the schema.
        /// </summary>
        [Column(Storage = "_DCTACGIA", DbType = "VARCHAR(50) NULL", UpdateCheck = UpdateCheck.Never)]
        public string DCTACGIA
        {
            get
            {
                return this._DCTACGIA;
            }
            set
            {
                if (this._DCTACGIA != value)
                {
                    this.OnDCTACGIAChanging(value);
                    this.SendPropertyChanging();
                    this._DCTACGIA = value;
                    this.SendPropertyChanged("DCTACGIA");
                    this.OnDCTACGIAChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SACHES in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="TACGIA_SACH", Storage="_SACHES", ThisKey="MATACGIA", OtherKey="MATACGIA", DeleteRule="RESTRICT")]
        public EntitySet<SACH> SACHES
        {
            get
            {
                return this._SACHES;
            }
            set
            {
                this._SACHES.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_SACHES(SACH entity)
        {
            this.SendPropertyChanging("SACHES");
            entity.TACGIA = this;
        }
    
        private void detach_SACHES(SACH entity)
        {
            this.SendPropertyChanging("SACHES");
            entity.TACGIA = null;
        }
    }

    /// <summary>
    /// There are no comments for QuanLyThuVien.NHAXB in the schema.
    /// </summary>
    [Table(Name = @"quanlythuvien.nhaxb")]
    public partial class NHAXB : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _MANXB;

        private string _TENNXB;

        private string _DCNXB;

        private string _DTNXB;
        #pragma warning restore 0649

        private EntitySet<SACH> _SACHES;

        private EntitySet<DONDATHANG> _DONDATHANGs;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnMANXBChanging(string value);
        partial void OnMANXBChanged();
        partial void OnTENNXBChanging(string value);
        partial void OnTENNXBChanged();
        partial void OnDCNXBChanging(string value);
        partial void OnDCNXBChanged();
        partial void OnDTNXBChanging(string value);
        partial void OnDTNXBChanged();
        #endregion

        public NHAXB()
        {
            this._SACHES = new EntitySet<SACH>(new Action<SACH>(this.attach_SACHES), new Action<SACH>(this.detach_SACHES));
            this._DONDATHANGs = new EntitySet<DONDATHANG>(new Action<DONDATHANG>(this.attach_DONDATHANGs), new Action<DONDATHANG>(this.detach_DONDATHANGs));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for MANXB in the schema.
        /// </summary>
        [Column(Storage = "_MANXB", CanBeNull = false, DbType = "CHAR(5) NOT NULL", IsPrimaryKey = true)]
        public string MANXB
        {
            get
            {
                return this._MANXB;
            }
            set
            {
                if (this._MANXB != value)
                {
                    this.OnMANXBChanging(value);
                    this.SendPropertyChanging();
                    this._MANXB = value;
                    this.SendPropertyChanged("MANXB");
                    this.OnMANXBChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TENNXB in the schema.
        /// </summary>
        [Column(Storage = "_TENNXB", DbType = "VARCHAR(50) NULL", UpdateCheck = UpdateCheck.Never)]
        public string TENNXB
        {
            get
            {
                return this._TENNXB;
            }
            set
            {
                if (this._TENNXB != value)
                {
                    this.OnTENNXBChanging(value);
                    this.SendPropertyChanging();
                    this._TENNXB = value;
                    this.SendPropertyChanged("TENNXB");
                    this.OnTENNXBChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DCNXB in the schema.
        /// </summary>
        [Column(Name = @"DC_NXB", Storage = "_DCNXB", DbType = "VARCHAR(50) NULL", UpdateCheck = UpdateCheck.Never)]
        public string DCNXB
        {
            get
            {
                return this._DCNXB;
            }
            set
            {
                if (this._DCNXB != value)
                {
                    this.OnDCNXBChanging(value);
                    this.SendPropertyChanging();
                    this._DCNXB = value;
                    this.SendPropertyChanged("DCNXB");
                    this.OnDCNXBChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DTNXB in the schema.
        /// </summary>
        [Column(Name = @"DT_NXB", Storage = "_DTNXB", DbType = "VARCHAR(10) NULL", UpdateCheck = UpdateCheck.Never)]
        public string DTNXB
        {
            get
            {
                return this._DTNXB;
            }
            set
            {
                if (this._DTNXB != value)
                {
                    this.OnDTNXBChanging(value);
                    this.SendPropertyChanging();
                    this._DTNXB = value;
                    this.SendPropertyChanged("DTNXB");
                    this.OnDTNXBChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SACHES in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="NHAXB_SACH", Storage="_SACHES", ThisKey="MANXB", OtherKey="MANXB", DeleteRule="RESTRICT")]
        public EntitySet<SACH> SACHES
        {
            get
            {
                return this._SACHES;
            }
            set
            {
                this._SACHES.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for DONDATHANGs in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="NHAXB_DONDATHANG", Storage="_DONDATHANGs", ThisKey="MANXB", OtherKey="MANXB", DeleteRule="RESTRICT")]
        public EntitySet<DONDATHANG> DONDATHANGs
        {
            get
            {
                return this._DONDATHANGs;
            }
            set
            {
                this._DONDATHANGs.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_SACHES(SACH entity)
        {
            this.SendPropertyChanging("SACHES");
            entity.NHAXB = this;
        }
    
        private void detach_SACHES(SACH entity)
        {
            this.SendPropertyChanging("SACHES");
            entity.NHAXB = null;
        }

        private void attach_DONDATHANGs(DONDATHANG entity)
        {
            this.SendPropertyChanging("DONDATHANGs");
            entity.NHAXB = this;
        }
    
        private void detach_DONDATHANGs(DONDATHANG entity)
        {
            this.SendPropertyChanging("DONDATHANGs");
            entity.NHAXB = null;
        }
    }

    /// <summary>
    /// There are no comments for QuanLyThuVien.VITRI in the schema.
    /// </summary>
    [Table(Name = @"quanlythuvien.vitri")]
    public partial class VITRI : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _MAVT;

        private string _TENVITRI;
        #pragma warning restore 0649

        private EntitySet<SACH> _SACHES;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnMAVTChanging(string value);
        partial void OnMAVTChanged();
        partial void OnTENVITRIChanging(string value);
        partial void OnTENVITRIChanged();
        #endregion

        public VITRI()
        {
            this._SACHES = new EntitySet<SACH>(new Action<SACH>(this.attach_SACHES), new Action<SACH>(this.detach_SACHES));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for MAVT in the schema.
        /// </summary>
        [Column(Storage = "_MAVT", CanBeNull = false, DbType = "CHAR(5) NOT NULL", IsPrimaryKey = true)]
        public string MAVT
        {
            get
            {
                return this._MAVT;
            }
            set
            {
                if (this._MAVT != value)
                {
                    this.OnMAVTChanging(value);
                    this.SendPropertyChanging();
                    this._MAVT = value;
                    this.SendPropertyChanged("MAVT");
                    this.OnMAVTChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TENVITRI in the schema.
        /// </summary>
        [Column(Storage = "_TENVITRI", DbType = "VARCHAR(10) NULL", UpdateCheck = UpdateCheck.Never)]
        public string TENVITRI
        {
            get
            {
                return this._TENVITRI;
            }
            set
            {
                if (this._TENVITRI != value)
                {
                    this.OnTENVITRIChanging(value);
                    this.SendPropertyChanging();
                    this._TENVITRI = value;
                    this.SendPropertyChanged("TENVITRI");
                    this.OnTENVITRIChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SACHES in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="VITRI_SACH", Storage="_SACHES", ThisKey="MAVT", OtherKey="MAVT", DeleteRule="RESTRICT")]
        public EntitySet<SACH> SACHES
        {
            get
            {
                return this._SACHES;
            }
            set
            {
                this._SACHES.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_SACHES(SACH entity)
        {
            this.SendPropertyChanging("SACHES");
            entity.VITRI = this;
        }
    
        private void detach_SACHES(SACH entity)
        {
            this.SendPropertyChanging("SACHES");
            entity.VITRI = null;
        }
    }

    /// <summary>
    /// There are no comments for QuanLyThuVien.THELOAI in the schema.
    /// </summary>
    [Table(Name = @"quanlythuvien.theloai")]
    public partial class THELOAI : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _MATHELOAI;

        private string _TENTHELOAI;
        #pragma warning restore 0649

        private EntitySet<SACH> _SACHES;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnMATHELOAIChanging(string value);
        partial void OnMATHELOAIChanged();
        partial void OnTENTHELOAIChanging(string value);
        partial void OnTENTHELOAIChanged();
        #endregion

        public THELOAI()
        {
            this._SACHES = new EntitySet<SACH>(new Action<SACH>(this.attach_SACHES), new Action<SACH>(this.detach_SACHES));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for MATHELOAI in the schema.
        /// </summary>
        [Column(Storage = "_MATHELOAI", CanBeNull = false, DbType = "CHAR(5) NOT NULL", IsPrimaryKey = true)]
        public string MATHELOAI
        {
            get
            {
                return this._MATHELOAI;
            }
            set
            {
                if (this._MATHELOAI != value)
                {
                    this.OnMATHELOAIChanging(value);
                    this.SendPropertyChanging();
                    this._MATHELOAI = value;
                    this.SendPropertyChanged("MATHELOAI");
                    this.OnMATHELOAIChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TENTHELOAI in the schema.
        /// </summary>
        [Column(Storage = "_TENTHELOAI", DbType = "VARCHAR(30) NULL", UpdateCheck = UpdateCheck.Never)]
        public string TENTHELOAI
        {
            get
            {
                return this._TENTHELOAI;
            }
            set
            {
                if (this._TENTHELOAI != value)
                {
                    this.OnTENTHELOAIChanging(value);
                    this.SendPropertyChanging();
                    this._TENTHELOAI = value;
                    this.SendPropertyChanged("TENTHELOAI");
                    this.OnTENTHELOAIChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SACHES in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="THELOAI_SACH", Storage="_SACHES", ThisKey="MATHELOAI", OtherKey="MATHELOAI", DeleteRule="RESTRICT")]
        public EntitySet<SACH> SACHES
        {
            get
            {
                return this._SACHES;
            }
            set
            {
                this._SACHES.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_SACHES(SACH entity)
        {
            this.SendPropertyChanging("SACHES");
            entity.THELOAI = this;
        }
    
        private void detach_SACHES(SACH entity)
        {
            this.SendPropertyChanging("SACHES");
            entity.THELOAI = null;
        }
    }

    /// <summary>
    /// There are no comments for QuanLyThuVien.NHANVIEN in the schema.
    /// </summary>
    [Table(Name = @"quanlythuvien.nhanvien")]
    public partial class NHANVIEN : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _MANV;

        private string _TENNV;

        private string _MACHUCVU;

        private string _TAIKHOAN;

        private System.Nullable<System.DateTime> _NGAYSINH;

        private string _SOCMND;

        private string _DIACHITHUONGTRU;

        private string _SODT;

        private string _EMAIL;
        #pragma warning restore 0649

        private EntitySet<PHIEUMUONTRA> _PHIEUMUONTRAs;

        private EntitySet<DONDATHANG> _DONDATHANGs;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnMANVChanging(string value);
        partial void OnMANVChanged();
        partial void OnTENNVChanging(string value);
        partial void OnTENNVChanged();
        partial void OnMACHUCVUChanging(string value);
        partial void OnMACHUCVUChanged();
        partial void OnTAIKHOANChanging(string value);
        partial void OnTAIKHOANChanged();
        partial void OnNGAYSINHChanging(System.Nullable<System.DateTime> value);
        partial void OnNGAYSINHChanged();
        partial void OnSOCMNDChanging(string value);
        partial void OnSOCMNDChanged();
        partial void OnDIACHITHUONGTRUChanging(string value);
        partial void OnDIACHITHUONGTRUChanged();
        partial void OnSODTChanging(string value);
        partial void OnSODTChanged();
        partial void OnEMAILChanging(string value);
        partial void OnEMAILChanged();
        #endregion

        public NHANVIEN()
        {
            this._PHIEUMUONTRAs = new EntitySet<PHIEUMUONTRA>(new Action<PHIEUMUONTRA>(this.attach_PHIEUMUONTRAs), new Action<PHIEUMUONTRA>(this.detach_PHIEUMUONTRAs));
            this._DONDATHANGs = new EntitySet<DONDATHANG>(new Action<DONDATHANG>(this.attach_DONDATHANGs), new Action<DONDATHANG>(this.detach_DONDATHANGs));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for MANV in the schema.
        /// </summary>
        [Column(Storage = "_MANV", CanBeNull = false, DbType = "CHAR(50) NOT NULL", IsPrimaryKey = true)]
        public string MANV
        {
            get
            {
                return this._MANV;
            }
            set
            {
                if (this._MANV != value)
                {
                    this.OnMANVChanging(value);
                    this.SendPropertyChanging();
                    this._MANV = value;
                    this.SendPropertyChanged("MANV");
                    this.OnMANVChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TENNV in the schema.
        /// </summary>
        [Column(Storage = "_TENNV", DbType = "VARCHAR(150) NULL", UpdateCheck = UpdateCheck.Never)]
        public string TENNV
        {
            get
            {
                return this._TENNV;
            }
            set
            {
                if (this._TENNV != value)
                {
                    this.OnTENNVChanging(value);
                    this.SendPropertyChanging();
                    this._TENNV = value;
                    this.SendPropertyChanged("TENNV");
                    this.OnTENNVChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MACHUCVU in the schema.
        /// </summary>
        [Column(Storage = "_MACHUCVU", CanBeNull = false, DbType = "CHAR(5) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string MACHUCVU
        {
            get
            {
                return this._MACHUCVU;
            }
            set
            {
                if (this._MACHUCVU != value)
                {
                    this.OnMACHUCVUChanging(value);
                    this.SendPropertyChanging();
                    this._MACHUCVU = value;
                    this.SendPropertyChanged("MACHUCVU");
                    this.OnMACHUCVUChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TAIKHOAN in the schema.
        /// </summary>
        [Column(Storage = "_TAIKHOAN", DbType = "VARCHAR(30) NULL", UpdateCheck = UpdateCheck.Never)]
        public string TAIKHOAN
        {
            get
            {
                return this._TAIKHOAN;
            }
            set
            {
                if (this._TAIKHOAN != value)
                {
                    this.OnTAIKHOANChanging(value);
                    this.SendPropertyChanging();
                    this._TAIKHOAN = value;
                    this.SendPropertyChanged("TAIKHOAN");
                    this.OnTAIKHOANChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NGAYSINH in the schema.
        /// </summary>
        [Column(Storage = "_NGAYSINH", DbType = "DATE NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> NGAYSINH
        {
            get
            {
                return this._NGAYSINH;
            }
            set
            {
                if (this._NGAYSINH != value)
                {
                    this.OnNGAYSINHChanging(value);
                    this.SendPropertyChanging();
                    this._NGAYSINH = value;
                    this.SendPropertyChanged("NGAYSINH");
                    this.OnNGAYSINHChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SOCMND in the schema.
        /// </summary>
        [Column(Storage = "_SOCMND", DbType = "VARCHAR(10) NULL", UpdateCheck = UpdateCheck.Never)]
        public string SOCMND
        {
            get
            {
                return this._SOCMND;
            }
            set
            {
                if (this._SOCMND != value)
                {
                    this.OnSOCMNDChanging(value);
                    this.SendPropertyChanging();
                    this._SOCMND = value;
                    this.SendPropertyChanged("SOCMND");
                    this.OnSOCMNDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DIACHITHUONGTRU in the schema.
        /// </summary>
        [Column(Storage = "_DIACHITHUONGTRU", DbType = "VARCHAR(250) NULL", UpdateCheck = UpdateCheck.Never)]
        public string DIACHITHUONGTRU
        {
            get
            {
                return this._DIACHITHUONGTRU;
            }
            set
            {
                if (this._DIACHITHUONGTRU != value)
                {
                    this.OnDIACHITHUONGTRUChanging(value);
                    this.SendPropertyChanging();
                    this._DIACHITHUONGTRU = value;
                    this.SendPropertyChanged("DIACHITHUONGTRU");
                    this.OnDIACHITHUONGTRUChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SODT in the schema.
        /// </summary>
        [Column(Storage = "_SODT", DbType = "VARCHAR(10) NULL", UpdateCheck = UpdateCheck.Never)]
        public string SODT
        {
            get
            {
                return this._SODT;
            }
            set
            {
                if (this._SODT != value)
                {
                    this.OnSODTChanging(value);
                    this.SendPropertyChanging();
                    this._SODT = value;
                    this.SendPropertyChanged("SODT");
                    this.OnSODTChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EMAIL in the schema.
        /// </summary>
        [Column(Storage = "_EMAIL", DbType = "VARCHAR(150) NULL", UpdateCheck = UpdateCheck.Never)]
        public string EMAIL
        {
            get
            {
                return this._EMAIL;
            }
            set
            {
                if (this._EMAIL != value)
                {
                    this.OnEMAILChanging(value);
                    this.SendPropertyChanging();
                    this._EMAIL = value;
                    this.SendPropertyChanged("EMAIL");
                    this.OnEMAILChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PHIEUMUONTRAs in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="NHANVIEN_PHIEUMUONTRA", Storage="_PHIEUMUONTRAs", ThisKey="MANV", OtherKey="MANV", DeleteRule="RESTRICT")]
        public EntitySet<PHIEUMUONTRA> PHIEUMUONTRAs
        {
            get
            {
                return this._PHIEUMUONTRAs;
            }
            set
            {
                this._PHIEUMUONTRAs.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for DONDATHANGs in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="NHANVIEN_DONDATHANG", Storage="_DONDATHANGs", ThisKey="MANV", OtherKey="MANV", DeleteRule="RESTRICT")]
        public EntitySet<DONDATHANG> DONDATHANGs
        {
            get
            {
                return this._DONDATHANGs;
            }
            set
            {
                this._DONDATHANGs.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_PHIEUMUONTRAs(PHIEUMUONTRA entity)
        {
            this.SendPropertyChanging("PHIEUMUONTRAs");
            entity.NHANVIEN = this;
        }
    
        private void detach_PHIEUMUONTRAs(PHIEUMUONTRA entity)
        {
            this.SendPropertyChanging("PHIEUMUONTRAs");
            entity.NHANVIEN = null;
        }

        private void attach_DONDATHANGs(DONDATHANG entity)
        {
            this.SendPropertyChanging("DONDATHANGs");
            entity.NHANVIEN = this;
        }
    
        private void detach_DONDATHANGs(DONDATHANG entity)
        {
            this.SendPropertyChanging("DONDATHANGs");
            entity.NHANVIEN = null;
        }
    }

    /// <summary>
    /// There are no comments for QuanLyThuVien.CTPHIEUMUONTRA in the schema.
    /// </summary>
    [Table(Name = @"quanlythuvien.ct_phieumuontra")]
    public partial class CTPHIEUMUONTRA : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _MAPHIEUMUON;

        private string _MASACH;

        private System.Nullable<System.DateTime> _NGAYDUKIENTRA;

        private System.Nullable<System.DateTime> _NGAYTRA;

        private string _TINHTRANG;
        #pragma warning restore 0649

        private EntityRef<SACH> _SACH;

        private EntityRef<PHIEUMUONTRA> _PHIEUMUONTRA;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnMAPHIEUMUONChanging(string value);
        partial void OnMAPHIEUMUONChanged();
        partial void OnMASACHChanging(string value);
        partial void OnMASACHChanged();
        partial void OnNGAYDUKIENTRAChanging(System.Nullable<System.DateTime> value);
        partial void OnNGAYDUKIENTRAChanged();
        partial void OnNGAYTRAChanging(System.Nullable<System.DateTime> value);
        partial void OnNGAYTRAChanged();
        partial void OnTINHTRANGChanging(string value);
        partial void OnTINHTRANGChanged();
        #endregion

        public CTPHIEUMUONTRA()
        {
            this._SACH  = default(EntityRef<SACH>);
            this._PHIEUMUONTRA  = default(EntityRef<PHIEUMUONTRA>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for MAPHIEUMUON in the schema.
        /// </summary>
        [Column(Storage = "_MAPHIEUMUON", CanBeNull = false, DbType = "CHAR(5) NOT NULL", IsPrimaryKey = true)]
        public string MAPHIEUMUON
        {
            get
            {
                return this._MAPHIEUMUON;
            }
            set
            {
                if (this._MAPHIEUMUON != value)
                {
                    if (this._PHIEUMUONTRA.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnMAPHIEUMUONChanging(value);
                    this.SendPropertyChanging();
                    this._MAPHIEUMUON = value;
                    this.SendPropertyChanged("MAPHIEUMUON");
                    this.OnMAPHIEUMUONChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MASACH in the schema.
        /// </summary>
        [Column(Storage = "_MASACH", CanBeNull = false, DbType = "CHAR(5) NOT NULL", IsPrimaryKey = true)]
        public string MASACH
        {
            get
            {
                return this._MASACH;
            }
            set
            {
                if (this._MASACH != value)
                {
                    if (this._SACH.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnMASACHChanging(value);
                    this.SendPropertyChanging();
                    this._MASACH = value;
                    this.SendPropertyChanged("MASACH");
                    this.OnMASACHChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NGAYDUKIENTRA in the schema.
        /// </summary>
        [Column(Storage = "_NGAYDUKIENTRA", DbType = "DATE NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> NGAYDUKIENTRA
        {
            get
            {
                return this._NGAYDUKIENTRA;
            }
            set
            {
                if (this._NGAYDUKIENTRA != value)
                {
                    this.OnNGAYDUKIENTRAChanging(value);
                    this.SendPropertyChanging();
                    this._NGAYDUKIENTRA = value;
                    this.SendPropertyChanged("NGAYDUKIENTRA");
                    this.OnNGAYDUKIENTRAChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NGAYTRA in the schema.
        /// </summary>
        [Column(Storage = "_NGAYTRA", DbType = "DATE NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> NGAYTRA
        {
            get
            {
                return this._NGAYTRA;
            }
            set
            {
                if (this._NGAYTRA != value)
                {
                    this.OnNGAYTRAChanging(value);
                    this.SendPropertyChanging();
                    this._NGAYTRA = value;
                    this.SendPropertyChanged("NGAYTRA");
                    this.OnNGAYTRAChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TINHTRANG in the schema.
        /// </summary>
        [Column(Storage = "_TINHTRANG", DbType = "VARCHAR(30) NULL", UpdateCheck = UpdateCheck.Never)]
        public string TINHTRANG
        {
            get
            {
                return this._TINHTRANG;
            }
            set
            {
                if (this._TINHTRANG != value)
                {
                    this.OnTINHTRANGChanging(value);
                    this.SendPropertyChanging();
                    this._TINHTRANG = value;
                    this.SendPropertyChanged("TINHTRANG");
                    this.OnTINHTRANGChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SACH in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SACH_CTPHIEUMUONTRA", Storage="_SACH", ThisKey="MASACH", OtherKey="MASACH", IsForeignKey=true)]
        public SACH SACH
        {
            get
            {
                return this._SACH.Entity;
            }
            set
            {
                SACH previousValue = this._SACH.Entity;
                if ((previousValue != value) || (this._SACH.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._SACH.Entity = null;
                        previousValue.CTPHIEUMUONTRAs.Remove(this);
                    }
                    this._SACH.Entity = value;
                    if (value != null)
                    {
                        this._MASACH = value.MASACH;
                        value.CTPHIEUMUONTRAs.Add(this);
                    }
                    else
                    {
                        this._MASACH = default(string);
                    }
                    this.SendPropertyChanged("SACH");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PHIEUMUONTRA in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="PHIEUMUONTRA_CTPHIEUMUONTRA", Storage="_PHIEUMUONTRA", ThisKey="MAPHIEUMUON", OtherKey="MAPHIEUMUON", IsForeignKey=true)]
        public PHIEUMUONTRA PHIEUMUONTRA
        {
            get
            {
                return this._PHIEUMUONTRA.Entity;
            }
            set
            {
                PHIEUMUONTRA previousValue = this._PHIEUMUONTRA.Entity;
                if ((previousValue != value) || (this._PHIEUMUONTRA.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._PHIEUMUONTRA.Entity = null;
                        previousValue.CTPHIEUMUONTRAs.Remove(this);
                    }
                    this._PHIEUMUONTRA.Entity = value;
                    if (value != null)
                    {
                        this._MAPHIEUMUON = value.MAPHIEUMUON;
                        value.CTPHIEUMUONTRAs.Add(this);
                    }
                    else
                    {
                        this._MAPHIEUMUON = default(string);
                    }
                    this.SendPropertyChanged("PHIEUMUONTRA");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for QuanLyThuVien.PHIEUMUONTRA in the schema.
    /// </summary>
    [Table(Name = @"quanlythuvien.phieumuontra")]
    public partial class PHIEUMUONTRA : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _MAPHIEUMUON;

        private string _MANV;

        private string _MADG;

        private System.Nullable<System.DateTime> _NGAYMUON;

        private string _LOAIMUON;

        private System.Nullable<float> _PHICOC;
        #pragma warning restore 0649

        private EntityRef<DOCGIA> _DOCGIA;

        private EntityRef<NHANVIEN> _NHANVIEN;

        private EntitySet<CTPHIEUMUONTRA> _CTPHIEUMUONTRAs;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnMAPHIEUMUONChanging(string value);
        partial void OnMAPHIEUMUONChanged();
        partial void OnMANVChanging(string value);
        partial void OnMANVChanged();
        partial void OnMADGChanging(string value);
        partial void OnMADGChanged();
        partial void OnNGAYMUONChanging(System.Nullable<System.DateTime> value);
        partial void OnNGAYMUONChanged();
        partial void OnLOAIMUONChanging(string value);
        partial void OnLOAIMUONChanged();
        partial void OnPHICOCChanging(System.Nullable<float> value);
        partial void OnPHICOCChanged();
        #endregion

        public PHIEUMUONTRA()
        {
            this._DOCGIA  = default(EntityRef<DOCGIA>);
            this._NHANVIEN  = default(EntityRef<NHANVIEN>);
            this._CTPHIEUMUONTRAs = new EntitySet<CTPHIEUMUONTRA>(new Action<CTPHIEUMUONTRA>(this.attach_CTPHIEUMUONTRAs), new Action<CTPHIEUMUONTRA>(this.detach_CTPHIEUMUONTRAs));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for MAPHIEUMUON in the schema.
        /// </summary>
        [Column(Storage = "_MAPHIEUMUON", CanBeNull = false, DbType = "CHAR(5) NOT NULL", IsPrimaryKey = true)]
        public string MAPHIEUMUON
        {
            get
            {
                return this._MAPHIEUMUON;
            }
            set
            {
                if (this._MAPHIEUMUON != value)
                {
                    this.OnMAPHIEUMUONChanging(value);
                    this.SendPropertyChanging();
                    this._MAPHIEUMUON = value;
                    this.SendPropertyChanged("MAPHIEUMUON");
                    this.OnMAPHIEUMUONChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MANV in the schema.
        /// </summary>
        [Column(Storage = "_MANV", CanBeNull = false, DbType = "CHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string MANV
        {
            get
            {
                return this._MANV;
            }
            set
            {
                if (this._MANV != value)
                {
                    if (this._NHANVIEN.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnMANVChanging(value);
                    this.SendPropertyChanging();
                    this._MANV = value;
                    this.SendPropertyChanged("MANV");
                    this.OnMANVChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MADG in the schema.
        /// </summary>
        [Column(Storage = "_MADG", DbType = "CHAR(5) NULL", UpdateCheck = UpdateCheck.Never)]
        public string MADG
        {
            get
            {
                return this._MADG;
            }
            set
            {
                if (this._MADG != value)
                {
                    if (this._DOCGIA.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnMADGChanging(value);
                    this.SendPropertyChanging();
                    this._MADG = value;
                    this.SendPropertyChanged("MADG");
                    this.OnMADGChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NGAYMUON in the schema.
        /// </summary>
        [Column(Storage = "_NGAYMUON", DbType = "DATE NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> NGAYMUON
        {
            get
            {
                return this._NGAYMUON;
            }
            set
            {
                if (this._NGAYMUON != value)
                {
                    this.OnNGAYMUONChanging(value);
                    this.SendPropertyChanging();
                    this._NGAYMUON = value;
                    this.SendPropertyChanged("NGAYMUON");
                    this.OnNGAYMUONChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LOAIMUON in the schema.
        /// </summary>
        [Column(Storage = "_LOAIMUON", DbType = "VARCHAR(50) NULL", UpdateCheck = UpdateCheck.Never)]
        public string LOAIMUON
        {
            get
            {
                return this._LOAIMUON;
            }
            set
            {
                if (this._LOAIMUON != value)
                {
                    this.OnLOAIMUONChanging(value);
                    this.SendPropertyChanging();
                    this._LOAIMUON = value;
                    this.SendPropertyChanged("LOAIMUON");
                    this.OnLOAIMUONChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PHICOC in the schema.
        /// </summary>
        [Column(Storage = "_PHICOC", DbType = "FLOAT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<float> PHICOC
        {
            get
            {
                return this._PHICOC;
            }
            set
            {
                if (this._PHICOC != value)
                {
                    this.OnPHICOCChanging(value);
                    this.SendPropertyChanging();
                    this._PHICOC = value;
                    this.SendPropertyChanged("PHICOC");
                    this.OnPHICOCChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DOCGIA in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DOCGIA_PHIEUMUONTRA", Storage="_DOCGIA", ThisKey="MADG", OtherKey="MADG", IsForeignKey=true)]
        public DOCGIA DOCGIA
        {
            get
            {
                return this._DOCGIA.Entity;
            }
            set
            {
                DOCGIA previousValue = this._DOCGIA.Entity;
                if ((previousValue != value) || (this._DOCGIA.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._DOCGIA.Entity = null;
                        previousValue.PHIEUMUONTRAs.Remove(this);
                    }
                    this._DOCGIA.Entity = value;
                    if (value != null)
                    {
                        this._MADG = value.MADG;
                        value.PHIEUMUONTRAs.Add(this);
                    }
                    else
                    {
                        this._MADG = default(string);
                    }
                    this.SendPropertyChanged("DOCGIA");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NHANVIEN in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="NHANVIEN_PHIEUMUONTRA", Storage="_NHANVIEN", ThisKey="MANV", OtherKey="MANV", IsForeignKey=true)]
        public NHANVIEN NHANVIEN
        {
            get
            {
                return this._NHANVIEN.Entity;
            }
            set
            {
                NHANVIEN previousValue = this._NHANVIEN.Entity;
                if ((previousValue != value) || (this._NHANVIEN.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._NHANVIEN.Entity = null;
                        previousValue.PHIEUMUONTRAs.Remove(this);
                    }
                    this._NHANVIEN.Entity = value;
                    if (value != null)
                    {
                        this._MANV = value.MANV;
                        value.PHIEUMUONTRAs.Add(this);
                    }
                    else
                    {
                        this._MANV = default(string);
                    }
                    this.SendPropertyChanged("NHANVIEN");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CTPHIEUMUONTRAs in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="PHIEUMUONTRA_CTPHIEUMUONTRA", Storage="_CTPHIEUMUONTRAs", ThisKey="MAPHIEUMUON", OtherKey="MAPHIEUMUON", DeleteRule="RESTRICT")]
        public EntitySet<CTPHIEUMUONTRA> CTPHIEUMUONTRAs
        {
            get
            {
                return this._CTPHIEUMUONTRAs;
            }
            set
            {
                this._CTPHIEUMUONTRAs.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_CTPHIEUMUONTRAs(CTPHIEUMUONTRA entity)
        {
            this.SendPropertyChanging("CTPHIEUMUONTRAs");
            entity.PHIEUMUONTRA = this;
        }
    
        private void detach_CTPHIEUMUONTRAs(CTPHIEUMUONTRA entity)
        {
            this.SendPropertyChanging("CTPHIEUMUONTRAs");
            entity.PHIEUMUONTRA = null;
        }
    }

    /// <summary>
    /// There are no comments for QuanLyThuVien.DONDATHANG in the schema.
    /// </summary>
    [Table(Name = @"quanlythuvien.dondathang")]
    public partial class DONDATHANG : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _MADDH;

        private string _MANV;

        private string _MANXB;

        private System.Nullable<System.DateTime> _NGAYNHAP;
        #pragma warning restore 0649

        private EntityRef<NHANVIEN> _NHANVIEN;

        private EntityRef<NHAXB> _NHAXB;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnMADDHChanging(string value);
        partial void OnMADDHChanged();
        partial void OnMANVChanging(string value);
        partial void OnMANVChanged();
        partial void OnMANXBChanging(string value);
        partial void OnMANXBChanged();
        partial void OnNGAYNHAPChanging(System.Nullable<System.DateTime> value);
        partial void OnNGAYNHAPChanged();
        #endregion

        public DONDATHANG()
        {
            this._NHANVIEN  = default(EntityRef<NHANVIEN>);
            this._NHAXB  = default(EntityRef<NHAXB>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for MADDH in the schema.
        /// </summary>
        [Column(Storage = "_MADDH", CanBeNull = false, DbType = "CHAR(5) NOT NULL", IsPrimaryKey = true)]
        public string MADDH
        {
            get
            {
                return this._MADDH;
            }
            set
            {
                if (this._MADDH != value)
                {
                    this.OnMADDHChanging(value);
                    this.SendPropertyChanging();
                    this._MADDH = value;
                    this.SendPropertyChanged("MADDH");
                    this.OnMADDHChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MANV in the schema.
        /// </summary>
        [Column(Storage = "_MANV", DbType = "CHAR(50) NULL", UpdateCheck = UpdateCheck.Never)]
        public string MANV
        {
            get
            {
                return this._MANV;
            }
            set
            {
                if (this._MANV != value)
                {
                    if (this._NHANVIEN.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnMANVChanging(value);
                    this.SendPropertyChanging();
                    this._MANV = value;
                    this.SendPropertyChanged("MANV");
                    this.OnMANVChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MANXB in the schema.
        /// </summary>
        [Column(Storage = "_MANXB", DbType = "CHAR(5) NULL", UpdateCheck = UpdateCheck.Never)]
        public string MANXB
        {
            get
            {
                return this._MANXB;
            }
            set
            {
                if (this._MANXB != value)
                {
                    if (this._NHAXB.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnMANXBChanging(value);
                    this.SendPropertyChanging();
                    this._MANXB = value;
                    this.SendPropertyChanged("MANXB");
                    this.OnMANXBChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NGAYNHAP in the schema.
        /// </summary>
        [Column(Storage = "_NGAYNHAP", DbType = "DATE NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> NGAYNHAP
        {
            get
            {
                return this._NGAYNHAP;
            }
            set
            {
                if (this._NGAYNHAP != value)
                {
                    this.OnNGAYNHAPChanging(value);
                    this.SendPropertyChanging();
                    this._NGAYNHAP = value;
                    this.SendPropertyChanged("NGAYNHAP");
                    this.OnNGAYNHAPChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NHANVIEN in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="NHANVIEN_DONDATHANG", Storage="_NHANVIEN", ThisKey="MANV", OtherKey="MANV", IsForeignKey=true)]
        public NHANVIEN NHANVIEN
        {
            get
            {
                return this._NHANVIEN.Entity;
            }
            set
            {
                NHANVIEN previousValue = this._NHANVIEN.Entity;
                if ((previousValue != value) || (this._NHANVIEN.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._NHANVIEN.Entity = null;
                        previousValue.DONDATHANGs.Remove(this);
                    }
                    this._NHANVIEN.Entity = value;
                    if (value != null)
                    {
                        this._MANV = value.MANV;
                        value.DONDATHANGs.Add(this);
                    }
                    else
                    {
                        this._MANV = default(string);
                    }
                    this.SendPropertyChanged("NHANVIEN");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NHAXB in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="NHAXB_DONDATHANG", Storage="_NHAXB", ThisKey="MANXB", OtherKey="MANXB", IsForeignKey=true)]
        public NHAXB NHAXB
        {
            get
            {
                return this._NHAXB.Entity;
            }
            set
            {
                NHAXB previousValue = this._NHAXB.Entity;
                if ((previousValue != value) || (this._NHAXB.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._NHAXB.Entity = null;
                        previousValue.DONDATHANGs.Remove(this);
                    }
                    this._NHAXB.Entity = value;
                    if (value != null)
                    {
                        this._MANXB = value.MANXB;
                        value.DONDATHANGs.Add(this);
                    }
                    else
                    {
                        this._MANXB = default(string);
                    }
                    this.SendPropertyChanged("NHAXB");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
