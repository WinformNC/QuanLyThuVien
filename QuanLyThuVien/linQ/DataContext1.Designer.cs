//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 11/12/2018 10:35:12 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace linQ
{

    [DatabaseAttribute(Name = "quanlythuvien")]
    [ProviderAttribute(typeof(Devart.Data.MySql.Linq.Provider.MySqlDataProvider))]
    public partial class QUANLYTHUVIENDataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(QUANLYTHUVIENDataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertDIEUKHOANVIPHAM(DIEUKHOANVIPHAM instance);
        partial void UpdateDIEUKHOANVIPHAM(DIEUKHOANVIPHAM instance);
        partial void DeleteDIEUKHOANVIPHAM(DIEUKHOANVIPHAM instance);
        partial void InsertPHAT(PHAT instance);
        partial void UpdatePHAT(PHAT instance);
        partial void DeletePHAT(PHAT instance);
        partial void InsertCHUCVU(CHUCVU instance);
        partial void UpdateCHUCVU(CHUCVU instance);
        partial void DeleteCHUCVU(CHUCVU instance);
        partial void InsertTAIKHOAN(TAIKHOAN instance);
        partial void UpdateTAIKHOAN(TAIKHOAN instance);
        partial void DeleteTAIKHOAN(TAIKHOAN instance);
        partial void InsertLOAITAIKHOAN(LOAITAIKHOAN instance);
        partial void UpdateLOAITAIKHOAN(LOAITAIKHOAN instance);
        partial void DeleteLOAITAIKHOAN(LOAITAIKHOAN instance);
        partial void InsertDOCGIA(DOCGIA instance);
        partial void UpdateDOCGIA(DOCGIA instance);
        partial void DeleteDOCGIA(DOCGIA instance);
        partial void InsertDATONLINE(DATONLINE instance);
        partial void UpdateDATONLINE(DATONLINE instance);
        partial void DeleteDATONLINE(DATONLINE instance);
        partial void InsertSACH(SACH instance);
        partial void UpdateSACH(SACH instance);
        partial void DeleteSACH(SACH instance);
        partial void InsertNHANVIEN(NHANVIEN instance);
        partial void UpdateNHANVIEN(NHANVIEN instance);
        partial void DeleteNHANVIEN(NHANVIEN instance);
        partial void InsertCHITIETPHAT(CHITIETPHAT instance);
        partial void UpdateCHITIETPHAT(CHITIETPHAT instance);
        partial void DeleteCHITIETPHAT(CHITIETPHAT instance);

        #endregion

        public QUANLYTHUVIENDataContext() :
        base(GetConnectionString("QUANLYTHUVIENDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        public QUANLYTHUVIENDataContext(MappingSource mappingSource) :
        base(GetConnectionString("QUANLYTHUVIENDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName)
        {
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public QUANLYTHUVIENDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public QUANLYTHUVIENDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public QUANLYTHUVIENDataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public QUANLYTHUVIENDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<DIEUKHOANVIPHAM> DIEUKHOANVIPHAMs
        {
            get
            {
                return this.GetTable<DIEUKHOANVIPHAM>();
            }
        }

        public Devart.Data.Linq.Table<PHAT> PHATs
        {
            get
            {
                return this.GetTable<PHAT>();
            }
        }

        public Devart.Data.Linq.Table<CHUCVU> CHUCVUs
        {
            get
            {
                return this.GetTable<CHUCVU>();
            }
        }

        public Devart.Data.Linq.Table<TAIKHOAN> TAIKHOANs
        {
            get
            {
                return this.GetTable<TAIKHOAN>();
            }
        }

        public Devart.Data.Linq.Table<LOAITAIKHOAN> LOAITAIKHOANs
        {
            get
            {
                return this.GetTable<LOAITAIKHOAN>();
            }
        }

        public Devart.Data.Linq.Table<DOCGIA> DOCGIAs
        {
            get
            {
                return this.GetTable<DOCGIA>();
            }
        }

        public Devart.Data.Linq.Table<DATONLINE> DATONLINEs
        {
            get
            {
                return this.GetTable<DATONLINE>();
            }
        }

        public Devart.Data.Linq.Table<SACH> SACHES
        {
            get
            {
                return this.GetTable<SACH>();
            }
        }

        public Devart.Data.Linq.Table<NHANVIEN> NHANVIENs
        {
            get
            {
                return this.GetTable<NHANVIEN>();
            }
        }

        public Devart.Data.Linq.Table<CHITIETPHAT> CHITIETPHATs
        {
            get
            {
                return this.GetTable<CHITIETPHAT>();
            }
        }
    }
}

namespace linQ
{

    /// <summary>
    /// There are no comments for linQ.DIEUKHOANVIPHAM in the schema.
    /// </summary>
    [Table(Name = @"quanlythuvien.dieukhoanvipham")]
    public partial class DIEUKHOANVIPHAM : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _MADIEUKHOAN;

        private string _TENDIEUKHOAN;

        private System.Nullable<float> _SOTIENPHAT;

        private string _HUONGXULY;
        #pragma warning restore 0649

        private EntitySet<CHITIETPHAT> _CHITIETPHATs;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnMADIEUKHOANChanging(string value);
        partial void OnMADIEUKHOANChanged();
        partial void OnTENDIEUKHOANChanging(string value);
        partial void OnTENDIEUKHOANChanged();
        partial void OnSOTIENPHATChanging(System.Nullable<float> value);
        partial void OnSOTIENPHATChanged();
        partial void OnHUONGXULYChanging(string value);
        partial void OnHUONGXULYChanged();
        #endregion

        public DIEUKHOANVIPHAM()
        {
            this._CHITIETPHATs = new EntitySet<CHITIETPHAT>(new Action<CHITIETPHAT>(this.attach_CHITIETPHATs), new Action<CHITIETPHAT>(this.detach_CHITIETPHATs));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for MADIEUKHOAN in the schema.
        /// </summary>
        [Column(Storage = "_MADIEUKHOAN", CanBeNull = false, DbType = "CHAR(5) NOT NULL", IsPrimaryKey = true)]
        public string MADIEUKHOAN
        {
            get
            {
                return this._MADIEUKHOAN;
            }
            set
            {
                if (this._MADIEUKHOAN != value)
                {
                    this.OnMADIEUKHOANChanging(value);
                    this.SendPropertyChanging();
                    this._MADIEUKHOAN = value;
                    this.SendPropertyChanged("MADIEUKHOAN");
                    this.OnMADIEUKHOANChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TENDIEUKHOAN in the schema.
        /// </summary>
        [Column(Storage = "_TENDIEUKHOAN", DbType = "VARCHAR(50) NULL", UpdateCheck = UpdateCheck.Never)]
        public string TENDIEUKHOAN
        {
            get
            {
                return this._TENDIEUKHOAN;
            }
            set
            {
                if (this._TENDIEUKHOAN != value)
                {
                    this.OnTENDIEUKHOANChanging(value);
                    this.SendPropertyChanging();
                    this._TENDIEUKHOAN = value;
                    this.SendPropertyChanged("TENDIEUKHOAN");
                    this.OnTENDIEUKHOANChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SOTIENPHAT in the schema.
        /// </summary>
        [Column(Storage = "_SOTIENPHAT", DbType = "FLOAT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<float> SOTIENPHAT
        {
            get
            {
                return this._SOTIENPHAT;
            }
            set
            {
                if (this._SOTIENPHAT != value)
                {
                    this.OnSOTIENPHATChanging(value);
                    this.SendPropertyChanging();
                    this._SOTIENPHAT = value;
                    this.SendPropertyChanged("SOTIENPHAT");
                    this.OnSOTIENPHATChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for HUONGXULY in the schema.
        /// </summary>
        [Column(Storage = "_HUONGXULY", DbType = "VARCHAR(500) NULL", UpdateCheck = UpdateCheck.Never)]
        public string HUONGXULY
        {
            get
            {
                return this._HUONGXULY;
            }
            set
            {
                if (this._HUONGXULY != value)
                {
                    this.OnHUONGXULYChanging(value);
                    this.SendPropertyChanging();
                    this._HUONGXULY = value;
                    this.SendPropertyChanged("HUONGXULY");
                    this.OnHUONGXULYChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CHITIETPHATs in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DIEUKHOANVIPHAM_CHITIETPHAT", Storage="_CHITIETPHATs", ThisKey="MADIEUKHOAN", OtherKey="MALOAIVIPHAM", DeleteRule="RESTRICT")]
        public EntitySet<CHITIETPHAT> CHITIETPHATs
        {
            get
            {
                return this._CHITIETPHATs;
            }
            set
            {
                this._CHITIETPHATs.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_CHITIETPHATs(CHITIETPHAT entity)
        {
            this.SendPropertyChanging("CHITIETPHATs");
            entity.DIEUKHOANVIPHAM = this;
        }
    
        private void detach_CHITIETPHATs(CHITIETPHAT entity)
        {
            this.SendPropertyChanging("CHITIETPHATs");
            entity.DIEUKHOANVIPHAM = null;
        }
    }

    /// <summary>
    /// There are no comments for linQ.PHAT in the schema.
    /// </summary>
    [Table(Name = @"quanlythuvien.phat")]
    public partial class PHAT : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _MAPHAT;

        private string _MANV;

        private string _MADG;
        #pragma warning restore 0649

        private EntityRef<DOCGIA> _DOCGIA;

        private EntityRef<NHANVIEN> _NHANVIEN;

        private EntitySet<CHITIETPHAT> _CHITIETPHATs;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnMAPHATChanging(string value);
        partial void OnMAPHATChanged();
        partial void OnMANVChanging(string value);
        partial void OnMANVChanged();
        partial void OnMADGChanging(string value);
        partial void OnMADGChanged();
        #endregion

        public PHAT()
        {
            this._DOCGIA  = default(EntityRef<DOCGIA>);
            this._NHANVIEN  = default(EntityRef<NHANVIEN>);
            this._CHITIETPHATs = new EntitySet<CHITIETPHAT>(new Action<CHITIETPHAT>(this.attach_CHITIETPHATs), new Action<CHITIETPHAT>(this.detach_CHITIETPHATs));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for MAPHAT in the schema.
        /// </summary>
        [Column(Storage = "_MAPHAT", CanBeNull = false, DbType = "CHAR(5) NOT NULL", IsPrimaryKey = true)]
        public string MAPHAT
        {
            get
            {
                return this._MAPHAT;
            }
            set
            {
                if (this._MAPHAT != value)
                {
                    this.OnMAPHATChanging(value);
                    this.SendPropertyChanging();
                    this._MAPHAT = value;
                    this.SendPropertyChanged("MAPHAT");
                    this.OnMAPHATChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MANV in the schema.
        /// </summary>
        [Column(Storage = "_MANV", DbType = "CHAR(50) NULL", UpdateCheck = UpdateCheck.Never)]
        public string MANV
        {
            get
            {
                return this._MANV;
            }
            set
            {
                if (this._MANV != value)
                {
                    if (this._NHANVIEN.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnMANVChanging(value);
                    this.SendPropertyChanging();
                    this._MANV = value;
                    this.SendPropertyChanged("MANV");
                    this.OnMANVChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MADG in the schema.
        /// </summary>
        [Column(Storage = "_MADG", DbType = "CHAR(5) NULL", UpdateCheck = UpdateCheck.Never)]
        public string MADG
        {
            get
            {
                return this._MADG;
            }
            set
            {
                if (this._MADG != value)
                {
                    if (this._DOCGIA.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnMADGChanging(value);
                    this.SendPropertyChanging();
                    this._MADG = value;
                    this.SendPropertyChanged("MADG");
                    this.OnMADGChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DOCGIA in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DOCGIA_PHAT", Storage="_DOCGIA", ThisKey="MADG", OtherKey="MADG", IsForeignKey=true)]
        public DOCGIA DOCGIA
        {
            get
            {
                return this._DOCGIA.Entity;
            }
            set
            {
                DOCGIA previousValue = this._DOCGIA.Entity;
                if ((previousValue != value) || (this._DOCGIA.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._DOCGIA.Entity = null;
                        previousValue.PHATs.Remove(this);
                    }
                    this._DOCGIA.Entity = value;
                    if (value != null)
                    {
                        this._MADG = value.MADG;
                        value.PHATs.Add(this);
                    }
                    else
                    {
                        this._MADG = default(string);
                    }
                    this.SendPropertyChanged("DOCGIA");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NHANVIEN in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="NHANVIEN_PHAT", Storage="_NHANVIEN", ThisKey="MANV", OtherKey="MANV", IsForeignKey=true)]
        public NHANVIEN NHANVIEN
        {
            get
            {
                return this._NHANVIEN.Entity;
            }
            set
            {
                NHANVIEN previousValue = this._NHANVIEN.Entity;
                if ((previousValue != value) || (this._NHANVIEN.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._NHANVIEN.Entity = null;
                        previousValue.PHATs.Remove(this);
                    }
                    this._NHANVIEN.Entity = value;
                    if (value != null)
                    {
                        this._MANV = value.MANV;
                        value.PHATs.Add(this);
                    }
                    else
                    {
                        this._MANV = default(string);
                    }
                    this.SendPropertyChanged("NHANVIEN");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CHITIETPHATs in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="PHAT_CHITIETPHAT", Storage="_CHITIETPHATs", ThisKey="MAPHAT", OtherKey="MAPHAT", DeleteRule="RESTRICT")]
        public EntitySet<CHITIETPHAT> CHITIETPHATs
        {
            get
            {
                return this._CHITIETPHATs;
            }
            set
            {
                this._CHITIETPHATs.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_CHITIETPHATs(CHITIETPHAT entity)
        {
            this.SendPropertyChanging("CHITIETPHATs");
            entity.PHAT = this;
        }
    
        private void detach_CHITIETPHATs(CHITIETPHAT entity)
        {
            this.SendPropertyChanging("CHITIETPHATs");
            entity.PHAT = null;
        }
    }

    /// <summary>
    /// There are no comments for linQ.CHUCVU in the schema.
    /// </summary>
    [Table(Name = @"quanlythuvien.chucvu")]
    public partial class CHUCVU : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _MACHUCVU;

        private string _TENCHUCVU;
        #pragma warning restore 0649

        private EntitySet<NHANVIEN> _NHANVIENs;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnMACHUCVUChanging(string value);
        partial void OnMACHUCVUChanged();
        partial void OnTENCHUCVUChanging(string value);
        partial void OnTENCHUCVUChanged();
        #endregion

        public CHUCVU()
        {
            this._NHANVIENs = new EntitySet<NHANVIEN>(new Action<NHANVIEN>(this.attach_NHANVIENs), new Action<NHANVIEN>(this.detach_NHANVIENs));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for MACHUCVU in the schema.
        /// </summary>
        [Column(Storage = "_MACHUCVU", CanBeNull = false, DbType = "CHAR(5) NOT NULL", IsPrimaryKey = true)]
        public string MACHUCVU
        {
            get
            {
                return this._MACHUCVU;
            }
            set
            {
                if (this._MACHUCVU != value)
                {
                    this.OnMACHUCVUChanging(value);
                    this.SendPropertyChanging();
                    this._MACHUCVU = value;
                    this.SendPropertyChanged("MACHUCVU");
                    this.OnMACHUCVUChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TENCHUCVU in the schema.
        /// </summary>
        [Column(Storage = "_TENCHUCVU", DbType = "VARCHAR(50) NULL", UpdateCheck = UpdateCheck.Never)]
        public string TENCHUCVU
        {
            get
            {
                return this._TENCHUCVU;
            }
            set
            {
                if (this._TENCHUCVU != value)
                {
                    this.OnTENCHUCVUChanging(value);
                    this.SendPropertyChanging();
                    this._TENCHUCVU = value;
                    this.SendPropertyChanged("TENCHUCVU");
                    this.OnTENCHUCVUChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NHANVIENs in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CHUCVU_NHANVIEN", Storage="_NHANVIENs", ThisKey="MACHUCVU", OtherKey="MACHUCVU", DeleteRule="RESTRICT")]
        public EntitySet<NHANVIEN> NHANVIENs
        {
            get
            {
                return this._NHANVIENs;
            }
            set
            {
                this._NHANVIENs.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_NHANVIENs(NHANVIEN entity)
        {
            this.SendPropertyChanging("NHANVIENs");
            entity.CHUCVU = this;
        }
    
        private void detach_NHANVIENs(NHANVIEN entity)
        {
            this.SendPropertyChanging("NHANVIENs");
            entity.CHUCVU = null;
        }
    }

    /// <summary>
    /// There are no comments for linQ.TAIKHOAN in the schema.
    /// </summary>
    [Table(Name = @"quanlythuvien.taikhoan")]
    public partial class TAIKHOAN : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _TAIKHOAN1;

        private string _MALOAITK;

        private string _MATKHAU;
        #pragma warning restore 0649

        private EntityRef<LOAITAIKHOAN> _LOAITAIKHOAN;

        private EntitySet<DOCGIA> _DOCGIAs;

        private EntitySet<NHANVIEN> _NHANVIENs;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnTAIKHOAN1Changing(string value);
        partial void OnTAIKHOAN1Changed();
        partial void OnMALOAITKChanging(string value);
        partial void OnMALOAITKChanged();
        partial void OnMATKHAUChanging(string value);
        partial void OnMATKHAUChanged();
        #endregion

        public TAIKHOAN()
        {
            this._LOAITAIKHOAN  = default(EntityRef<LOAITAIKHOAN>);
            this._DOCGIAs = new EntitySet<DOCGIA>(new Action<DOCGIA>(this.attach_DOCGIAs), new Action<DOCGIA>(this.detach_DOCGIAs));
            this._NHANVIENs = new EntitySet<NHANVIEN>(new Action<NHANVIEN>(this.attach_NHANVIENs), new Action<NHANVIEN>(this.detach_NHANVIENs));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for TAIKHOAN1 in the schema.
        /// </summary>
        [Column(Name = @"TAIKHOAN", Storage = "_TAIKHOAN1", CanBeNull = false, DbType = "VARCHAR(30) NOT NULL", IsPrimaryKey = true)]
        public string TAIKHOAN1
        {
            get
            {
                return this._TAIKHOAN1;
            }
            set
            {
                if (this._TAIKHOAN1 != value)
                {
                    this.OnTAIKHOAN1Changing(value);
                    this.SendPropertyChanging();
                    this._TAIKHOAN1 = value;
                    this.SendPropertyChanged("TAIKHOAN1");
                    this.OnTAIKHOAN1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MALOAITK in the schema.
        /// </summary>
        [Column(Storage = "_MALOAITK", DbType = "CHAR(5) NULL", UpdateCheck = UpdateCheck.Never)]
        public string MALOAITK
        {
            get
            {
                return this._MALOAITK;
            }
            set
            {
                if (this._MALOAITK != value)
                {
                    if (this._LOAITAIKHOAN.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnMALOAITKChanging(value);
                    this.SendPropertyChanging();
                    this._MALOAITK = value;
                    this.SendPropertyChanged("MALOAITK");
                    this.OnMALOAITKChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MATKHAU in the schema.
        /// </summary>
        [Column(Storage = "_MATKHAU", DbType = "VARCHAR(30) NULL", UpdateCheck = UpdateCheck.Never)]
        public string MATKHAU
        {
            get
            {
                return this._MATKHAU;
            }
            set
            {
                if (this._MATKHAU != value)
                {
                    this.OnMATKHAUChanging(value);
                    this.SendPropertyChanging();
                    this._MATKHAU = value;
                    this.SendPropertyChanged("MATKHAU");
                    this.OnMATKHAUChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LOAITAIKHOAN in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="LOAITAIKHOAN_TAIKHOAN", Storage="_LOAITAIKHOAN", ThisKey="MALOAITK", OtherKey="MALOAITK", IsForeignKey=true)]
        public LOAITAIKHOAN LOAITAIKHOAN
        {
            get
            {
                return this._LOAITAIKHOAN.Entity;
            }
            set
            {
                LOAITAIKHOAN previousValue = this._LOAITAIKHOAN.Entity;
                if ((previousValue != value) || (this._LOAITAIKHOAN.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._LOAITAIKHOAN.Entity = null;
                        previousValue.TAIKHOANs.Remove(this);
                    }
                    this._LOAITAIKHOAN.Entity = value;
                    if (value != null)
                    {
                        this._MALOAITK = value.MALOAITK;
                        value.TAIKHOANs.Add(this);
                    }
                    else
                    {
                        this._MALOAITK = default(string);
                    }
                    this.SendPropertyChanged("LOAITAIKHOAN");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DOCGIAs in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="TAIKHOAN_DOCGIA", Storage="_DOCGIAs", ThisKey="TAIKHOAN1", OtherKey="TAIKHOAN", DeleteRule="RESTRICT")]
        public EntitySet<DOCGIA> DOCGIAs
        {
            get
            {
                return this._DOCGIAs;
            }
            set
            {
                this._DOCGIAs.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for NHANVIENs in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="TAIKHOAN_NHANVIEN", Storage="_NHANVIENs", ThisKey="TAIKHOAN1", OtherKey="TAIKHOAN", DeleteRule="RESTRICT")]
        public EntitySet<NHANVIEN> NHANVIENs
        {
            get
            {
                return this._NHANVIENs;
            }
            set
            {
                this._NHANVIENs.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_DOCGIAs(DOCGIA entity)
        {
            this.SendPropertyChanging("DOCGIAs");
            entity.TAIKHOAN1 = this;
        }
    
        private void detach_DOCGIAs(DOCGIA entity)
        {
            this.SendPropertyChanging("DOCGIAs");
            entity.TAIKHOAN1 = null;
        }

        private void attach_NHANVIENs(NHANVIEN entity)
        {
            this.SendPropertyChanging("NHANVIENs");
            entity.TAIKHOAN1 = this;
        }
    
        private void detach_NHANVIENs(NHANVIEN entity)
        {
            this.SendPropertyChanging("NHANVIENs");
            entity.TAIKHOAN1 = null;
        }
    }

    /// <summary>
    /// There are no comments for linQ.LOAITAIKHOAN in the schema.
    /// </summary>
    [Table(Name = @"quanlythuvien.loaitaikhoan")]
    public partial class LOAITAIKHOAN : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _MALOAITK;

        private string _TENLOAI;
        #pragma warning restore 0649

        private EntitySet<TAIKHOAN> _TAIKHOANs;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnMALOAITKChanging(string value);
        partial void OnMALOAITKChanged();
        partial void OnTENLOAIChanging(string value);
        partial void OnTENLOAIChanged();
        #endregion

        public LOAITAIKHOAN()
        {
            this._TAIKHOANs = new EntitySet<TAIKHOAN>(new Action<TAIKHOAN>(this.attach_TAIKHOANs), new Action<TAIKHOAN>(this.detach_TAIKHOANs));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for MALOAITK in the schema.
        /// </summary>
        [Column(Storage = "_MALOAITK", CanBeNull = false, DbType = "CHAR(5) NOT NULL", IsPrimaryKey = true)]
        public string MALOAITK
        {
            get
            {
                return this._MALOAITK;
            }
            set
            {
                if (this._MALOAITK != value)
                {
                    this.OnMALOAITKChanging(value);
                    this.SendPropertyChanging();
                    this._MALOAITK = value;
                    this.SendPropertyChanged("MALOAITK");
                    this.OnMALOAITKChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TENLOAI in the schema.
        /// </summary>
        [Column(Storage = "_TENLOAI", DbType = "VARCHAR(30) NULL", UpdateCheck = UpdateCheck.Never)]
        public string TENLOAI
        {
            get
            {
                return this._TENLOAI;
            }
            set
            {
                if (this._TENLOAI != value)
                {
                    this.OnTENLOAIChanging(value);
                    this.SendPropertyChanging();
                    this._TENLOAI = value;
                    this.SendPropertyChanged("TENLOAI");
                    this.OnTENLOAIChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TAIKHOANs in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="LOAITAIKHOAN_TAIKHOAN", Storage="_TAIKHOANs", ThisKey="MALOAITK", OtherKey="MALOAITK", DeleteRule="RESTRICT")]
        public EntitySet<TAIKHOAN> TAIKHOANs
        {
            get
            {
                return this._TAIKHOANs;
            }
            set
            {
                this._TAIKHOANs.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_TAIKHOANs(TAIKHOAN entity)
        {
            this.SendPropertyChanging("TAIKHOANs");
            entity.LOAITAIKHOAN = this;
        }
    
        private void detach_TAIKHOANs(TAIKHOAN entity)
        {
            this.SendPropertyChanging("TAIKHOANs");
            entity.LOAITAIKHOAN = null;
        }
    }

    /// <summary>
    /// There are no comments for linQ.DOCGIA in the schema.
    /// </summary>
    [Table(Name = @"quanlythuvien.docgia")]
    public partial class DOCGIA : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _MADG;

        private string _MALOAIDG;

        private string _TENDG;

        private string _EMAILDG;

        private string _DIACHIDG;

        private string _SDTDG;

        private string _GIOITINHDG;

        private string _TAIKHOAN;
        #pragma warning restore 0649

        private EntitySet<PHAT> _PHATs;

        private EntityRef<TAIKHOAN> _TAIKHOAN1;

        private EntitySet<DATONLINE> _DATONLINEs;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnMADGChanging(string value);
        partial void OnMADGChanged();
        partial void OnMALOAIDGChanging(string value);
        partial void OnMALOAIDGChanged();
        partial void OnTENDGChanging(string value);
        partial void OnTENDGChanged();
        partial void OnEMAILDGChanging(string value);
        partial void OnEMAILDGChanged();
        partial void OnDIACHIDGChanging(string value);
        partial void OnDIACHIDGChanged();
        partial void OnSDTDGChanging(string value);
        partial void OnSDTDGChanged();
        partial void OnGIOITINHDGChanging(string value);
        partial void OnGIOITINHDGChanged();
        partial void OnTAIKHOANChanging(string value);
        partial void OnTAIKHOANChanged();
        #endregion

        public DOCGIA()
        {
            this._PHATs = new EntitySet<PHAT>(new Action<PHAT>(this.attach_PHATs), new Action<PHAT>(this.detach_PHATs));
            this._TAIKHOAN1  = default(EntityRef<TAIKHOAN>);
            this._DATONLINEs = new EntitySet<DATONLINE>(new Action<DATONLINE>(this.attach_DATONLINEs), new Action<DATONLINE>(this.detach_DATONLINEs));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for MADG in the schema.
        /// </summary>
        [Column(Storage = "_MADG", CanBeNull = false, DbType = "CHAR(5) NOT NULL", IsPrimaryKey = true)]
        public string MADG
        {
            get
            {
                return this._MADG;
            }
            set
            {
                if (this._MADG != value)
                {
                    this.OnMADGChanging(value);
                    this.SendPropertyChanging();
                    this._MADG = value;
                    this.SendPropertyChanged("MADG");
                    this.OnMADGChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MALOAIDG in the schema.
        /// </summary>
        [Column(Storage = "_MALOAIDG", DbType = "CHAR(5) NULL", UpdateCheck = UpdateCheck.Never)]
        public string MALOAIDG
        {
            get
            {
                return this._MALOAIDG;
            }
            set
            {
                if (this._MALOAIDG != value)
                {
                    this.OnMALOAIDGChanging(value);
                    this.SendPropertyChanging();
                    this._MALOAIDG = value;
                    this.SendPropertyChanged("MALOAIDG");
                    this.OnMALOAIDGChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TENDG in the schema.
        /// </summary>
        [Column(Storage = "_TENDG", DbType = "VARCHAR(30) NULL", UpdateCheck = UpdateCheck.Never)]
        public string TENDG
        {
            get
            {
                return this._TENDG;
            }
            set
            {
                if (this._TENDG != value)
                {
                    this.OnTENDGChanging(value);
                    this.SendPropertyChanging();
                    this._TENDG = value;
                    this.SendPropertyChanged("TENDG");
                    this.OnTENDGChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EMAILDG in the schema.
        /// </summary>
        [Column(Storage = "_EMAILDG", DbType = "VARCHAR(20) NULL", UpdateCheck = UpdateCheck.Never)]
        public string EMAILDG
        {
            get
            {
                return this._EMAILDG;
            }
            set
            {
                if (this._EMAILDG != value)
                {
                    this.OnEMAILDGChanging(value);
                    this.SendPropertyChanging();
                    this._EMAILDG = value;
                    this.SendPropertyChanged("EMAILDG");
                    this.OnEMAILDGChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DIACHIDG in the schema.
        /// </summary>
        [Column(Storage = "_DIACHIDG", DbType = "VARCHAR(100) NULL", UpdateCheck = UpdateCheck.Never)]
        public string DIACHIDG
        {
            get
            {
                return this._DIACHIDG;
            }
            set
            {
                if (this._DIACHIDG != value)
                {
                    this.OnDIACHIDGChanging(value);
                    this.SendPropertyChanging();
                    this._DIACHIDG = value;
                    this.SendPropertyChanged("DIACHIDG");
                    this.OnDIACHIDGChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SDTDG in the schema.
        /// </summary>
        [Column(Storage = "_SDTDG", DbType = "VARCHAR(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public string SDTDG
        {
            get
            {
                return this._SDTDG;
            }
            set
            {
                if (this._SDTDG != value)
                {
                    this.OnSDTDGChanging(value);
                    this.SendPropertyChanging();
                    this._SDTDG = value;
                    this.SendPropertyChanged("SDTDG");
                    this.OnSDTDGChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GIOITINHDG in the schema.
        /// </summary>
        [Column(Storage = "_GIOITINHDG", DbType = "VARCHAR(5) NULL", UpdateCheck = UpdateCheck.Never)]
        public string GIOITINHDG
        {
            get
            {
                return this._GIOITINHDG;
            }
            set
            {
                if (this._GIOITINHDG != value)
                {
                    this.OnGIOITINHDGChanging(value);
                    this.SendPropertyChanging();
                    this._GIOITINHDG = value;
                    this.SendPropertyChanged("GIOITINHDG");
                    this.OnGIOITINHDGChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TAIKHOAN in the schema.
        /// </summary>
        [Column(Storage = "_TAIKHOAN", DbType = "VARCHAR(30) NULL", UpdateCheck = UpdateCheck.Never)]
        public string TAIKHOAN
        {
            get
            {
                return this._TAIKHOAN;
            }
            set
            {
                if (this._TAIKHOAN != value)
                {
                    if (this._TAIKHOAN1.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnTAIKHOANChanging(value);
                    this.SendPropertyChanging();
                    this._TAIKHOAN = value;
                    this.SendPropertyChanged("TAIKHOAN");
                    this.OnTAIKHOANChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PHATs in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DOCGIA_PHAT", Storage="_PHATs", ThisKey="MADG", OtherKey="MADG", DeleteRule="RESTRICT")]
        public EntitySet<PHAT> PHATs
        {
            get
            {
                return this._PHATs;
            }
            set
            {
                this._PHATs.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for TAIKHOAN1 in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="TAIKHOAN_DOCGIA", Storage="_TAIKHOAN1", ThisKey="TAIKHOAN", OtherKey="TAIKHOAN1", IsForeignKey=true)]
        public TAIKHOAN TAIKHOAN1
        {
            get
            {
                return this._TAIKHOAN1.Entity;
            }
            set
            {
                TAIKHOAN previousValue = this._TAIKHOAN1.Entity;
                if ((previousValue != value) || (this._TAIKHOAN1.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._TAIKHOAN1.Entity = null;
                        previousValue.DOCGIAs.Remove(this);
                    }
                    this._TAIKHOAN1.Entity = value;
                    if (value != null)
                    {
                        this._TAIKHOAN = value.TAIKHOAN1;
                        value.DOCGIAs.Add(this);
                    }
                    else
                    {
                        this._TAIKHOAN = default(string);
                    }
                    this.SendPropertyChanged("TAIKHOAN1");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DATONLINEs in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DOCGIA_DATONLINE", Storage="_DATONLINEs", ThisKey="MADG", OtherKey="MADG", DeleteRule="RESTRICT")]
        public EntitySet<DATONLINE> DATONLINEs
        {
            get
            {
                return this._DATONLINEs;
            }
            set
            {
                this._DATONLINEs.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_PHATs(PHAT entity)
        {
            this.SendPropertyChanging("PHATs");
            entity.DOCGIA = this;
        }
    
        private void detach_PHATs(PHAT entity)
        {
            this.SendPropertyChanging("PHATs");
            entity.DOCGIA = null;
        }

        private void attach_DATONLINEs(DATONLINE entity)
        {
            this.SendPropertyChanging("DATONLINEs");
            entity.DOCGIA = this;
        }
    
        private void detach_DATONLINEs(DATONLINE entity)
        {
            this.SendPropertyChanging("DATONLINEs");
            entity.DOCGIA = null;
        }
    }

    /// <summary>
    /// There are no comments for linQ.DATONLINE in the schema.
    /// </summary>
    [Table(Name = @"quanlythuvien.datonline")]
    public partial class DATONLINE : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _MASACH;

        private string _MADG;

        private System.Nullable<System.DateTime> _NGAYLAY;

        private System.Nullable<System.DateTime> _NGAYDAT;
        #pragma warning restore 0649

        private EntityRef<DOCGIA> _DOCGIA;

        private EntityRef<SACH> _SACH;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnMASACHChanging(string value);
        partial void OnMASACHChanged();
        partial void OnMADGChanging(string value);
        partial void OnMADGChanged();
        partial void OnNGAYLAYChanging(System.Nullable<System.DateTime> value);
        partial void OnNGAYLAYChanged();
        partial void OnNGAYDATChanging(System.Nullable<System.DateTime> value);
        partial void OnNGAYDATChanged();
        #endregion

        public DATONLINE()
        {
            this._DOCGIA  = default(EntityRef<DOCGIA>);
            this._SACH  = default(EntityRef<SACH>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for MASACH in the schema.
        /// </summary>
        [Column(Storage = "_MASACH", CanBeNull = false, DbType = "CHAR(5) NOT NULL", IsPrimaryKey = true)]
        public string MASACH
        {
            get
            {
                return this._MASACH;
            }
            set
            {
                if (this._MASACH != value)
                {
                    if (this._SACH.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnMASACHChanging(value);
                    this.SendPropertyChanging();
                    this._MASACH = value;
                    this.SendPropertyChanged("MASACH");
                    this.OnMASACHChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MADG in the schema.
        /// </summary>
        [Column(Storage = "_MADG", CanBeNull = false, DbType = "CHAR(5) NOT NULL", IsPrimaryKey = true)]
        public string MADG
        {
            get
            {
                return this._MADG;
            }
            set
            {
                if (this._MADG != value)
                {
                    if (this._DOCGIA.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnMADGChanging(value);
                    this.SendPropertyChanging();
                    this._MADG = value;
                    this.SendPropertyChanged("MADG");
                    this.OnMADGChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NGAYLAY in the schema.
        /// </summary>
        [Column(Storage = "_NGAYLAY", DbType = "DATE NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> NGAYLAY
        {
            get
            {
                return this._NGAYLAY;
            }
            set
            {
                if (this._NGAYLAY != value)
                {
                    this.OnNGAYLAYChanging(value);
                    this.SendPropertyChanging();
                    this._NGAYLAY = value;
                    this.SendPropertyChanged("NGAYLAY");
                    this.OnNGAYLAYChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NGAYDAT in the schema.
        /// </summary>
        [Column(Storage = "_NGAYDAT", DbType = "DATE NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> NGAYDAT
        {
            get
            {
                return this._NGAYDAT;
            }
            set
            {
                if (this._NGAYDAT != value)
                {
                    this.OnNGAYDATChanging(value);
                    this.SendPropertyChanging();
                    this._NGAYDAT = value;
                    this.SendPropertyChanged("NGAYDAT");
                    this.OnNGAYDATChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DOCGIA in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DOCGIA_DATONLINE", Storage="_DOCGIA", ThisKey="MADG", OtherKey="MADG", IsForeignKey=true)]
        public DOCGIA DOCGIA
        {
            get
            {
                return this._DOCGIA.Entity;
            }
            set
            {
                DOCGIA previousValue = this._DOCGIA.Entity;
                if ((previousValue != value) || (this._DOCGIA.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._DOCGIA.Entity = null;
                        previousValue.DATONLINEs.Remove(this);
                    }
                    this._DOCGIA.Entity = value;
                    if (value != null)
                    {
                        this._MADG = value.MADG;
                        value.DATONLINEs.Add(this);
                    }
                    else
                    {
                        this._MADG = default(string);
                    }
                    this.SendPropertyChanged("DOCGIA");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SACH in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SACH_DATONLINE", Storage="_SACH", ThisKey="MASACH", OtherKey="MASACH", IsForeignKey=true)]
        public SACH SACH
        {
            get
            {
                return this._SACH.Entity;
            }
            set
            {
                SACH previousValue = this._SACH.Entity;
                if ((previousValue != value) || (this._SACH.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._SACH.Entity = null;
                        previousValue.DATONLINEs.Remove(this);
                    }
                    this._SACH.Entity = value;
                    if (value != null)
                    {
                        this._MASACH = value.MASACH;
                        value.DATONLINEs.Add(this);
                    }
                    else
                    {
                        this._MASACH = default(string);
                    }
                    this.SendPropertyChanged("SACH");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for linQ.SACH in the schema.
    /// </summary>
    [Table(Name = @"quanlythuvien.sach")]
    public partial class SACH : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _MASACH;

        private string _MATHELOAI;

        private string _MATACGIA;

        private string _MANXB;

        private string _MAVT;

        private string _TENSACH;

        private System.Nullable<int> _NAMXB;

        private string _HINHANHSACH;

        private string _MOTA;

        private string _KHOA;

        private System.Nullable<System.DateTime> _THANGNHAP;

        private System.Nullable<float> _GIA;

        private System.Nullable<int> _SOLUONG;
        #pragma warning restore 0649

        private EntitySet<DATONLINE> _DATONLINEs;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnMASACHChanging(string value);
        partial void OnMASACHChanged();
        partial void OnMATHELOAIChanging(string value);
        partial void OnMATHELOAIChanged();
        partial void OnMATACGIAChanging(string value);
        partial void OnMATACGIAChanged();
        partial void OnMANXBChanging(string value);
        partial void OnMANXBChanged();
        partial void OnMAVTChanging(string value);
        partial void OnMAVTChanged();
        partial void OnTENSACHChanging(string value);
        partial void OnTENSACHChanged();
        partial void OnNAMXBChanging(System.Nullable<int> value);
        partial void OnNAMXBChanged();
        partial void OnHINHANHSACHChanging(string value);
        partial void OnHINHANHSACHChanged();
        partial void OnMOTAChanging(string value);
        partial void OnMOTAChanged();
        partial void OnKHOAChanging(string value);
        partial void OnKHOAChanged();
        partial void OnTHANGNHAPChanging(System.Nullable<System.DateTime> value);
        partial void OnTHANGNHAPChanged();
        partial void OnGIAChanging(System.Nullable<float> value);
        partial void OnGIAChanged();
        partial void OnSOLUONGChanging(System.Nullable<int> value);
        partial void OnSOLUONGChanged();
        #endregion

        public SACH()
        {
            this._DATONLINEs = new EntitySet<DATONLINE>(new Action<DATONLINE>(this.attach_DATONLINEs), new Action<DATONLINE>(this.detach_DATONLINEs));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for MASACH in the schema.
        /// </summary>
        [Column(Storage = "_MASACH", CanBeNull = false, DbType = "CHAR(5) NOT NULL", IsPrimaryKey = true)]
        public string MASACH
        {
            get
            {
                return this._MASACH;
            }
            set
            {
                if (this._MASACH != value)
                {
                    this.OnMASACHChanging(value);
                    this.SendPropertyChanging();
                    this._MASACH = value;
                    this.SendPropertyChanged("MASACH");
                    this.OnMASACHChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MATHELOAI in the schema.
        /// </summary>
        [Column(Storage = "_MATHELOAI", CanBeNull = false, DbType = "CHAR(5) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string MATHELOAI
        {
            get
            {
                return this._MATHELOAI;
            }
            set
            {
                if (this._MATHELOAI != value)
                {
                    this.OnMATHELOAIChanging(value);
                    this.SendPropertyChanging();
                    this._MATHELOAI = value;
                    this.SendPropertyChanged("MATHELOAI");
                    this.OnMATHELOAIChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MATACGIA in the schema.
        /// </summary>
        [Column(Storage = "_MATACGIA", CanBeNull = false, DbType = "CHAR(5) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string MATACGIA
        {
            get
            {
                return this._MATACGIA;
            }
            set
            {
                if (this._MATACGIA != value)
                {
                    this.OnMATACGIAChanging(value);
                    this.SendPropertyChanging();
                    this._MATACGIA = value;
                    this.SendPropertyChanged("MATACGIA");
                    this.OnMATACGIAChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MANXB in the schema.
        /// </summary>
        [Column(Storage = "_MANXB", CanBeNull = false, DbType = "CHAR(5) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string MANXB
        {
            get
            {
                return this._MANXB;
            }
            set
            {
                if (this._MANXB != value)
                {
                    this.OnMANXBChanging(value);
                    this.SendPropertyChanging();
                    this._MANXB = value;
                    this.SendPropertyChanged("MANXB");
                    this.OnMANXBChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MAVT in the schema.
        /// </summary>
        [Column(Storage = "_MAVT", DbType = "CHAR(5) NULL", UpdateCheck = UpdateCheck.Never)]
        public string MAVT
        {
            get
            {
                return this._MAVT;
            }
            set
            {
                if (this._MAVT != value)
                {
                    this.OnMAVTChanging(value);
                    this.SendPropertyChanging();
                    this._MAVT = value;
                    this.SendPropertyChanged("MAVT");
                    this.OnMAVTChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TENSACH in the schema.
        /// </summary>
        [Column(Storage = "_TENSACH", DbType = "VARCHAR(50) NULL", UpdateCheck = UpdateCheck.Never)]
        public string TENSACH
        {
            get
            {
                return this._TENSACH;
            }
            set
            {
                if (this._TENSACH != value)
                {
                    this.OnTENSACHChanging(value);
                    this.SendPropertyChanging();
                    this._TENSACH = value;
                    this.SendPropertyChanged("TENSACH");
                    this.OnTENSACHChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NAMXB in the schema.
        /// </summary>
        [Column(Storage = "_NAMXB", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> NAMXB
        {
            get
            {
                return this._NAMXB;
            }
            set
            {
                if (this._NAMXB != value)
                {
                    this.OnNAMXBChanging(value);
                    this.SendPropertyChanging();
                    this._NAMXB = value;
                    this.SendPropertyChanged("NAMXB");
                    this.OnNAMXBChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for HINHANHSACH in the schema.
        /// </summary>
        [Column(Storage = "_HINHANHSACH", DbType = "VARCHAR(100) NULL", UpdateCheck = UpdateCheck.Never)]
        public string HINHANHSACH
        {
            get
            {
                return this._HINHANHSACH;
            }
            set
            {
                if (this._HINHANHSACH != value)
                {
                    this.OnHINHANHSACHChanging(value);
                    this.SendPropertyChanging();
                    this._HINHANHSACH = value;
                    this.SendPropertyChanged("HINHANHSACH");
                    this.OnHINHANHSACHChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MOTA in the schema.
        /// </summary>
        [Column(Storage = "_MOTA", DbType = "VARCHAR(1500) NULL", UpdateCheck = UpdateCheck.Never)]
        public string MOTA
        {
            get
            {
                return this._MOTA;
            }
            set
            {
                if (this._MOTA != value)
                {
                    this.OnMOTAChanging(value);
                    this.SendPropertyChanging();
                    this._MOTA = value;
                    this.SendPropertyChanged("MOTA");
                    this.OnMOTAChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for KHOA in the schema.
        /// </summary>
        [Column(Storage = "_KHOA", DbType = "VARCHAR(50) NULL", UpdateCheck = UpdateCheck.Never)]
        public string KHOA
        {
            get
            {
                return this._KHOA;
            }
            set
            {
                if (this._KHOA != value)
                {
                    this.OnKHOAChanging(value);
                    this.SendPropertyChanging();
                    this._KHOA = value;
                    this.SendPropertyChanged("KHOA");
                    this.OnKHOAChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for THANGNHAP in the schema.
        /// </summary>
        [Column(Storage = "_THANGNHAP", DbType = "DATE NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> THANGNHAP
        {
            get
            {
                return this._THANGNHAP;
            }
            set
            {
                if (this._THANGNHAP != value)
                {
                    this.OnTHANGNHAPChanging(value);
                    this.SendPropertyChanging();
                    this._THANGNHAP = value;
                    this.SendPropertyChanged("THANGNHAP");
                    this.OnTHANGNHAPChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GIA in the schema.
        /// </summary>
        [Column(Storage = "_GIA", DbType = "FLOAT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<float> GIA
        {
            get
            {
                return this._GIA;
            }
            set
            {
                if (this._GIA != value)
                {
                    this.OnGIAChanging(value);
                    this.SendPropertyChanging();
                    this._GIA = value;
                    this.SendPropertyChanged("GIA");
                    this.OnGIAChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SOLUONG in the schema.
        /// </summary>
        [Column(Storage = "_SOLUONG", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> SOLUONG
        {
            get
            {
                return this._SOLUONG;
            }
            set
            {
                if (this._SOLUONG != value)
                {
                    this.OnSOLUONGChanging(value);
                    this.SendPropertyChanging();
                    this._SOLUONG = value;
                    this.SendPropertyChanged("SOLUONG");
                    this.OnSOLUONGChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DATONLINEs in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="SACH_DATONLINE", Storage="_DATONLINEs", ThisKey="MASACH", OtherKey="MASACH", DeleteRule="RESTRICT")]
        public EntitySet<DATONLINE> DATONLINEs
        {
            get
            {
                return this._DATONLINEs;
            }
            set
            {
                this._DATONLINEs.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_DATONLINEs(DATONLINE entity)
        {
            this.SendPropertyChanging("DATONLINEs");
            entity.SACH = this;
        }
    
        private void detach_DATONLINEs(DATONLINE entity)
        {
            this.SendPropertyChanging("DATONLINEs");
            entity.SACH = null;
        }
    }

    /// <summary>
    /// There are no comments for linQ.NHANVIEN in the schema.
    /// </summary>
    [Table(Name = @"quanlythuvien.nhanvien")]
    public partial class NHANVIEN : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _MANV;

        private string _TENNV;

        private string _MACHUCVU;

        private string _TAIKHOAN;

        private System.Nullable<System.DateTime> _NGAYSINH;

        private string _SOCMND;

        private string _DIACHITHUONGTRU;

        private string _SODT;

        private string _EMAIL;
        #pragma warning restore 0649

        private EntitySet<PHAT> _PHATs;

        private EntityRef<CHUCVU> _CHUCVU;

        private EntityRef<TAIKHOAN> _TAIKHOAN1;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnMANVChanging(string value);
        partial void OnMANVChanged();
        partial void OnTENNVChanging(string value);
        partial void OnTENNVChanged();
        partial void OnMACHUCVUChanging(string value);
        partial void OnMACHUCVUChanged();
        partial void OnTAIKHOANChanging(string value);
        partial void OnTAIKHOANChanged();
        partial void OnNGAYSINHChanging(System.Nullable<System.DateTime> value);
        partial void OnNGAYSINHChanged();
        partial void OnSOCMNDChanging(string value);
        partial void OnSOCMNDChanged();
        partial void OnDIACHITHUONGTRUChanging(string value);
        partial void OnDIACHITHUONGTRUChanged();
        partial void OnSODTChanging(string value);
        partial void OnSODTChanged();
        partial void OnEMAILChanging(string value);
        partial void OnEMAILChanged();
        #endregion

        public NHANVIEN()
        {
            this._PHATs = new EntitySet<PHAT>(new Action<PHAT>(this.attach_PHATs), new Action<PHAT>(this.detach_PHATs));
            this._CHUCVU  = default(EntityRef<CHUCVU>);
            this._TAIKHOAN1  = default(EntityRef<TAIKHOAN>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for MANV in the schema.
        /// </summary>
        [Column(Storage = "_MANV", CanBeNull = false, DbType = "CHAR(50) NOT NULL", IsPrimaryKey = true)]
        public string MANV
        {
            get
            {
                return this._MANV;
            }
            set
            {
                if (this._MANV != value)
                {
                    this.OnMANVChanging(value);
                    this.SendPropertyChanging();
                    this._MANV = value;
                    this.SendPropertyChanged("MANV");
                    this.OnMANVChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TENNV in the schema.
        /// </summary>
        [Column(Storage = "_TENNV", DbType = "VARCHAR(150) NULL", UpdateCheck = UpdateCheck.Never)]
        public string TENNV
        {
            get
            {
                return this._TENNV;
            }
            set
            {
                if (this._TENNV != value)
                {
                    this.OnTENNVChanging(value);
                    this.SendPropertyChanging();
                    this._TENNV = value;
                    this.SendPropertyChanged("TENNV");
                    this.OnTENNVChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MACHUCVU in the schema.
        /// </summary>
        [Column(Storage = "_MACHUCVU", CanBeNull = false, DbType = "CHAR(5) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string MACHUCVU
        {
            get
            {
                return this._MACHUCVU;
            }
            set
            {
                if (this._MACHUCVU != value)
                {
                    if (this._CHUCVU.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnMACHUCVUChanging(value);
                    this.SendPropertyChanging();
                    this._MACHUCVU = value;
                    this.SendPropertyChanged("MACHUCVU");
                    this.OnMACHUCVUChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TAIKHOAN in the schema.
        /// </summary>
        [Column(Storage = "_TAIKHOAN", DbType = "VARCHAR(30) NULL", UpdateCheck = UpdateCheck.Never)]
        public string TAIKHOAN
        {
            get
            {
                return this._TAIKHOAN;
            }
            set
            {
                if (this._TAIKHOAN != value)
                {
                    if (this._TAIKHOAN1.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnTAIKHOANChanging(value);
                    this.SendPropertyChanging();
                    this._TAIKHOAN = value;
                    this.SendPropertyChanged("TAIKHOAN");
                    this.OnTAIKHOANChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NGAYSINH in the schema.
        /// </summary>
        [Column(Storage = "_NGAYSINH", DbType = "DATE NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> NGAYSINH
        {
            get
            {
                return this._NGAYSINH;
            }
            set
            {
                if (this._NGAYSINH != value)
                {
                    this.OnNGAYSINHChanging(value);
                    this.SendPropertyChanging();
                    this._NGAYSINH = value;
                    this.SendPropertyChanged("NGAYSINH");
                    this.OnNGAYSINHChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SOCMND in the schema.
        /// </summary>
        [Column(Storage = "_SOCMND", DbType = "VARCHAR(10) NULL", UpdateCheck = UpdateCheck.Never)]
        public string SOCMND
        {
            get
            {
                return this._SOCMND;
            }
            set
            {
                if (this._SOCMND != value)
                {
                    this.OnSOCMNDChanging(value);
                    this.SendPropertyChanging();
                    this._SOCMND = value;
                    this.SendPropertyChanged("SOCMND");
                    this.OnSOCMNDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DIACHITHUONGTRU in the schema.
        /// </summary>
        [Column(Storage = "_DIACHITHUONGTRU", DbType = "VARCHAR(250) NULL", UpdateCheck = UpdateCheck.Never)]
        public string DIACHITHUONGTRU
        {
            get
            {
                return this._DIACHITHUONGTRU;
            }
            set
            {
                if (this._DIACHITHUONGTRU != value)
                {
                    this.OnDIACHITHUONGTRUChanging(value);
                    this.SendPropertyChanging();
                    this._DIACHITHUONGTRU = value;
                    this.SendPropertyChanged("DIACHITHUONGTRU");
                    this.OnDIACHITHUONGTRUChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SODT in the schema.
        /// </summary>
        [Column(Storage = "_SODT", DbType = "VARCHAR(10) NULL", UpdateCheck = UpdateCheck.Never)]
        public string SODT
        {
            get
            {
                return this._SODT;
            }
            set
            {
                if (this._SODT != value)
                {
                    this.OnSODTChanging(value);
                    this.SendPropertyChanging();
                    this._SODT = value;
                    this.SendPropertyChanged("SODT");
                    this.OnSODTChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EMAIL in the schema.
        /// </summary>
        [Column(Storage = "_EMAIL", DbType = "VARCHAR(150) NULL", UpdateCheck = UpdateCheck.Never)]
        public string EMAIL
        {
            get
            {
                return this._EMAIL;
            }
            set
            {
                if (this._EMAIL != value)
                {
                    this.OnEMAILChanging(value);
                    this.SendPropertyChanging();
                    this._EMAIL = value;
                    this.SendPropertyChanged("EMAIL");
                    this.OnEMAILChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PHATs in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="NHANVIEN_PHAT", Storage="_PHATs", ThisKey="MANV", OtherKey="MANV", DeleteRule="RESTRICT")]
        public EntitySet<PHAT> PHATs
        {
            get
            {
                return this._PHATs;
            }
            set
            {
                this._PHATs.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for CHUCVU in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="CHUCVU_NHANVIEN", Storage="_CHUCVU", ThisKey="MACHUCVU", OtherKey="MACHUCVU", IsForeignKey=true)]
        public CHUCVU CHUCVU
        {
            get
            {
                return this._CHUCVU.Entity;
            }
            set
            {
                CHUCVU previousValue = this._CHUCVU.Entity;
                if ((previousValue != value) || (this._CHUCVU.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._CHUCVU.Entity = null;
                        previousValue.NHANVIENs.Remove(this);
                    }
                    this._CHUCVU.Entity = value;
                    if (value != null)
                    {
                        this._MACHUCVU = value.MACHUCVU;
                        value.NHANVIENs.Add(this);
                    }
                    else
                    {
                        this._MACHUCVU = default(string);
                    }
                    this.SendPropertyChanged("CHUCVU");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TAIKHOAN1 in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="TAIKHOAN_NHANVIEN", Storage="_TAIKHOAN1", ThisKey="TAIKHOAN", OtherKey="TAIKHOAN1", IsForeignKey=true)]
        public TAIKHOAN TAIKHOAN1
        {
            get
            {
                return this._TAIKHOAN1.Entity;
            }
            set
            {
                TAIKHOAN previousValue = this._TAIKHOAN1.Entity;
                if ((previousValue != value) || (this._TAIKHOAN1.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._TAIKHOAN1.Entity = null;
                        previousValue.NHANVIENs.Remove(this);
                    }
                    this._TAIKHOAN1.Entity = value;
                    if (value != null)
                    {
                        this._TAIKHOAN = value.TAIKHOAN1;
                        value.NHANVIENs.Add(this);
                    }
                    else
                    {
                        this._TAIKHOAN = default(string);
                    }
                    this.SendPropertyChanged("TAIKHOAN1");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_PHATs(PHAT entity)
        {
            this.SendPropertyChanging("PHATs");
            entity.NHANVIEN = this;
        }
    
        private void detach_PHATs(PHAT entity)
        {
            this.SendPropertyChanging("PHATs");
            entity.NHANVIEN = null;
        }
    }

    /// <summary>
    /// There are no comments for linQ.CHITIETPHAT in the schema.
    /// </summary>
    [Table(Name = @"quanlythuvien.chitietphat")]
    public partial class CHITIETPHAT : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _MAPHAT;

        private string _MALOAIVIPHAM;

        private System.Nullable<float> _TIENPHAT;

        private string _GHICHU;
        #pragma warning restore 0649

        private EntityRef<DIEUKHOANVIPHAM> _DIEUKHOANVIPHAM;

        private EntityRef<PHAT> _PHAT;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnMAPHATChanging(string value);
        partial void OnMAPHATChanged();
        partial void OnMALOAIVIPHAMChanging(string value);
        partial void OnMALOAIVIPHAMChanged();
        partial void OnTIENPHATChanging(System.Nullable<float> value);
        partial void OnTIENPHATChanged();
        partial void OnGHICHUChanging(string value);
        partial void OnGHICHUChanged();
        #endregion

        public CHITIETPHAT()
        {
            this._DIEUKHOANVIPHAM  = default(EntityRef<DIEUKHOANVIPHAM>);
            this._PHAT  = default(EntityRef<PHAT>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for MAPHAT in the schema.
        /// </summary>
        [Column(Storage = "_MAPHAT", CanBeNull = false, DbType = "CHAR(5) NOT NULL", IsPrimaryKey = true)]
        public string MAPHAT
        {
            get
            {
                return this._MAPHAT;
            }
            set
            {
                if (this._MAPHAT != value)
                {
                    if (this._PHAT.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnMAPHATChanging(value);
                    this.SendPropertyChanging();
                    this._MAPHAT = value;
                    this.SendPropertyChanged("MAPHAT");
                    this.OnMAPHATChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MALOAIVIPHAM in the schema.
        /// </summary>
        [Column(Storage = "_MALOAIVIPHAM", CanBeNull = false, DbType = "CHAR(5) NOT NULL", IsPrimaryKey = true)]
        public string MALOAIVIPHAM
        {
            get
            {
                return this._MALOAIVIPHAM;
            }
            set
            {
                if (this._MALOAIVIPHAM != value)
                {
                    if (this._DIEUKHOANVIPHAM.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnMALOAIVIPHAMChanging(value);
                    this.SendPropertyChanging();
                    this._MALOAIVIPHAM = value;
                    this.SendPropertyChanged("MALOAIVIPHAM");
                    this.OnMALOAIVIPHAMChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TIENPHAT in the schema.
        /// </summary>
        [Column(Storage = "_TIENPHAT", DbType = "FLOAT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<float> TIENPHAT
        {
            get
            {
                return this._TIENPHAT;
            }
            set
            {
                if (this._TIENPHAT != value)
                {
                    this.OnTIENPHATChanging(value);
                    this.SendPropertyChanging();
                    this._TIENPHAT = value;
                    this.SendPropertyChanged("TIENPHAT");
                    this.OnTIENPHATChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GHICHU in the schema.
        /// </summary>
        [Column(Storage = "_GHICHU", DbType = "VARCHAR(500) NULL", UpdateCheck = UpdateCheck.Never)]
        public string GHICHU
        {
            get
            {
                return this._GHICHU;
            }
            set
            {
                if (this._GHICHU != value)
                {
                    this.OnGHICHUChanging(value);
                    this.SendPropertyChanging();
                    this._GHICHU = value;
                    this.SendPropertyChanged("GHICHU");
                    this.OnGHICHUChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DIEUKHOANVIPHAM in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="DIEUKHOANVIPHAM_CHITIETPHAT", Storage="_DIEUKHOANVIPHAM", ThisKey="MALOAIVIPHAM", OtherKey="MADIEUKHOAN", IsForeignKey=true)]
        public DIEUKHOANVIPHAM DIEUKHOANVIPHAM
        {
            get
            {
                return this._DIEUKHOANVIPHAM.Entity;
            }
            set
            {
                DIEUKHOANVIPHAM previousValue = this._DIEUKHOANVIPHAM.Entity;
                if ((previousValue != value) || (this._DIEUKHOANVIPHAM.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._DIEUKHOANVIPHAM.Entity = null;
                        previousValue.CHITIETPHATs.Remove(this);
                    }
                    this._DIEUKHOANVIPHAM.Entity = value;
                    if (value != null)
                    {
                        this._MALOAIVIPHAM = value.MADIEUKHOAN;
                        value.CHITIETPHATs.Add(this);
                    }
                    else
                    {
                        this._MALOAIVIPHAM = default(string);
                    }
                    this.SendPropertyChanged("DIEUKHOANVIPHAM");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PHAT in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="PHAT_CHITIETPHAT", Storage="_PHAT", ThisKey="MAPHAT", OtherKey="MAPHAT", IsForeignKey=true)]
        public PHAT PHAT
        {
            get
            {
                return this._PHAT.Entity;
            }
            set
            {
                PHAT previousValue = this._PHAT.Entity;
                if ((previousValue != value) || (this._PHAT.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._PHAT.Entity = null;
                        previousValue.CHITIETPHATs.Remove(this);
                    }
                    this._PHAT.Entity = value;
                    if (value != null)
                    {
                        this._MAPHAT = value.MAPHAT;
                        value.CHITIETPHATs.Add(this);
                    }
                    else
                    {
                        this._MAPHAT = default(string);
                    }
                    this.SendPropertyChanged("PHAT");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
